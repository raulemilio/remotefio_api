PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    1

       1; Raul Emilio Romero
       2; 27-01-2025
       3; cd /sys/class/remoteproc/remoteproc1
       4; echo 'am335x-pru0-rc-encoder-fw' > firmware
       5; echo 'start'> state
       6; echo 'stop' > state
       7; cd /sys/kernel/debug/remoteproc/remoteproc1
       8; sudo cat regs
       9
      10; Este programa registra 1024 muestras por canal a una frecuencia de muestreo de fs=172kHz
      11; tiene dos flanco configurables para verificar que el tiempo total de registro es de aprox 5,8 ms
      12
      13; PRU setup definitions
      14
      15; memory
      16  .asg C28, CONST_PRUSHAREDRAM                         ; shared mem addr contant table
      17  .asg 64,  CNT_OFFSET                                 ; valor original 64
      18
      19  .asg 0x00000000, RAM0_ADDR_BASE                      ; local addr ram0. In linux space addr is 0x4a3
      20  .asg 0x00002000, RAM1_ADDR_BASE                      ; local addr ram1. In linux space addr is 0x4a3
      21
      22  .asg 0x00000000, RAM0_INDEX_0                        ;
      23  .asg 0x00001000, RAM0_INDEX_N                        ;
      24
      25  .asg 0x04, OFFSET_4_BYTES                            ; el tamanio del dato es 4 bytes
      26  .asg 0x1000, SAMPLES                                 ; Muestras a guardar en cada iteracion 0x1000 -
      27  .asg "50000", SAMPLE_PERIOD                          ; fs aprox 99799 -> 1KHz. 1000
      28
      29  .asg 0x00010000, SHARED_ADDR                         ; local addr shared. In linux space addr is 0x4
      30  .asg 0x20, SHD_8                                     ; shared[8] bit0 flag linux. No usamos shared[0
      31  .asg 0x24, SHD_9                                     ; Shared[9] bit0-> flag data ready RAM[0-4095] 
      32
      33  .asg 0x22000, PRU0_CTRL
      34  .asg 0x24000, PRU1_CTRL                              ; page 19
      35
      36; registros del modulo clk
      37  .asg 0x44e00400, CM_WKUP                             ; addr base. TRM pag.179
      38  .asg 0xBC, CM_WKUP_ADC_TSC_CLKCTRL                   ; clk offset TRM pag.1315
      39  .asg 0x02, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE            ; TRM pag.1369
      40
      41; end-of-sequence interrupt
      42  .asg 0x28, ADC_TSC_IRQSTATUS                         ;
      43  .asg 0x02, ADC_TSC_IRQSTATUS_END_OF_SECUENCE         ; cuidado aca el bit es el 0x02 pero debe confi
      44
      45  .asg 0x30, ADC_TSC_IRQENABLE_CLR                     ;
      46  .asg 0xFFFFFFFF, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ; deshabilitar todas las interrupciones para lu
      47
      48  .asg 0x2C, ADC_TSC_IRQENABLE_SET                     ;
      49  .asg 0x00, ADC_TSC_IRQENABLE_SET_RESET_MASK          ;
      50
      51  .asg 0x02, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE     ; aviso que termino la secuencia de medicion
      52  ;.asg 0x0F, ADC_TSC_IRQENABLE_SET_FIFO_0_THRESHOLD    ; aviso que todos los datos estan disponibles 
      53
      54; registros especificos del modulo ADC_TSC
      55  .asg 0x44e0d000, ADC_TSC                             ; TRM pag.180
PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    2

      56  .asg 0x40, ADC_TSC_CTRL                              ; registro de control del modulo
      57  .asg 0x00, ADC_TSC_CTRL_ENABLE                       ;
      58  .asg 0x01, ADC_TSC_CTRL_STEP_ID_TAG                  ;
      59  .asg 0x02, ADC_TSC_CTRL_STEPCONFIG_PROTECT           ;
      60
      61  .asg 0x48, ADC_TSC_ADCRANGE                          ;
      62  .asg (0xFFF<<16), ADC_TSC_ADCRANGE_HIGH_RANGE_DATA   ; cargamos 4095 en los bits 27-16. TRM pag. 185
      63
      64  .asg 0x4C, ADC_TSC_CLKDIV                            ; clk
      65  .asg 0x00, ADC_TSC_CLKDIV_ADC_CLKDIV                 ; valor a cargar para la division del clk. Carg
      66
      67  .asg 0x54, ADC_TSC_STEPENABLE                        ; registro para habilitar los steps
      68  .asg 0x3A, ADC_TSC_STEPENABLE_ENABLE_MASK            ; un canal (0000 0010 -> 0x02) Cuatro canales (
      69  .asg 0x00, ADC_TSC_STEPENABLE_DISABLE_MASK           ; se desahbilitan todos los canales
      70
      71  .asg 0x64, ADC_TSC_STEPCONFIG_1                      ; ch0
      72  .asg 0x00, ADC_TSC_STEPCONFIG_1_MASK                 ; SW mode, single ended, one shot mode, fifo 0,
      73
      74  .asg 0x68, ADC_TSC_STEPDELAY_1                       ; TRM pag. 1859
      75  .asg 0x00, ADC_TSC_STEPDELAY_1_MASK                  ; OpenDly0 SampleDly0
      76
      77  .asg 0x74, ADC_TSC_STEPCONFIG_3                      ; ch2
      78  .asg 0x00100000, ADC_TSC_STEPCONFIG_3_MASK           ; SW mode, single ended, one shot mode, fifo 0,
      79
      80  .asg 0x78, ADC_TSC_STEPDELAY_3                       ; TRM pag. 1859
      81  .asg 0x00, ADC_TSC_STEPDELAY_3_MASK                  ; OpenDly0 SampleDly0
      82
      83  .asg 0x7C, ADC_TSC_STEPCONFIG_4                      ; ch3
      84  .asg 0x00180000, ADC_TSC_STEPCONFIG_4_MASK           ; SW mode, single ended, one shot mode, fifo 0,
      85
      86  .asg 0x80, ADC_TSC_STEPDELAY_4                       ; TRM pag. 1859
      87  .asg 0x00, ADC_TSC_STEPDELAY_4_MASK                  ; OpenDly0 SampleDly0
      88
      89  .asg 0x84, ADC_TSC_STEPCONFIG_5                      ; ch5
      90  .asg 0x00200000, ADC_TSC_STEPCONFIG_5_MASK           ; SW mode, single ended, one shot mode, fifo 0,
      91
      92  .asg 0x88, ADC_TSC_STEPDELAY_5                       ; TRM pag. 1859
      93  .asg 0x00, ADC_TSC_STEPDELAY_5_MASK                  ; openDly0 SampleDly0
      94
      95  .asg 0xE4, ADC_TSC_FIFO_0_COUNT                      ; registro de conteo de datos en FIFO0
      96  .asg 0x100, ADC_TSC_FIFO_0_DATA                      ; registro FIFO0
      97  .asg 0xFFF, MASK_12_BIT                              ; FIFO0_DATA
      98
      99  .asg r30.t5, pruout_fs_sample_test                   ; debug-> usamos esta salida para validad fs. c
     100
     101  .asg 32, PRU0_R31_VEC_VALID                          ; allows notification of program completion
     102  .asg 3,  PRU_EVTOUT_0                                ; the event number that is sent back
     103
     104  .clink
     105  .global start
     106
     107 00000000                 start:
     108; registros fijos
     109  ; r3-> addr base RAM0
     110  ; r5-> N cantidad de muestras por ciclo de muestreo. Default N = 4096
PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    3

     111  ; r6-> bit0 toggle RAM[0-4095] o RAM[4096-8191]
     112
     113; inicializacion
     114 00000000 000083240000C3    LDI32 r3, RAM0_ADDR_BASE                             ; registro que almancena la direccion base, co 
     115 00000008 0000002EFF8184    ZERO  &r4, 4                                         ; offset inicial en ram0[0]
     116 0000000c 100085240000C5    LDI32 r5, SAMPLES                                    ; cantidad de muestras por iteracion
     117 00000014 000086240000C6    LDI32 r6, 0                                          ; flag para determinar que index se carga INDEX
     118 0000001c 0000001D05FEFE    CLR   r30, pruout_fs_sample_test                     ; debug-> pru0_pru_r30_5 as an output P9_27
     119
     120 00000020                 SETUP:
     121; CM_WKUP
     122; Habilitar el relor del modulo ADC en CM_WKUP
     123 00000020 04BC802444E0C0    LDI32 r0, (CM_WKUP|CM_WKUP_ADC_TSC_CLKCTRL)          ; cargamos en r0 la addr del registro CLKCTRL d
     124 00000028 000281240000C1    LDI32 r1, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE             ; cargamos el valor 0x02 en r1 que habilita en 
     125 00000030 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; cargamos a donde apunta r0 el valor contenido
     126
     127; ADC_TSC module-> disabe BIT0
     128 00000034 D040802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CTRL)                     ; load addr
     129 0000003c 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     130 00000040 0000001D00E1E1    CLR   r1, r1, ADC_TSC_CTRL_ENABLE                    ; ojo para realiazar
     131 00000044 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849 0b0110
     132
     133; ADC_TSC module -> Enable StepConfig step ID tag BIT1
     134 00000048 D040802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CTRL)                     ; load addr
     135 00000050 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     136 00000054 0000001D01E1E1    CLR   r1, r1, ADC_TSC_CTRL_STEP_ID_TAG               ; enable-> set | disable-> clr
     137 00000058 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     138
     139; ADC_TSC module -> Enable StepConfig Protect Are not protected (writable) BIT2. Tenemos que habilitar
     140 0000005c D040802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CTRL)                     ; load addr
     141 00000064 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     142 00000068 0000001F02E1E1    SET   r1, r1, ADC_TSC_CTRL_STEPCONFIG_PROTECT        ;
     143 0000006c 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     144
     145; step 1 config
     146 00000070 D064802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPCONFIG_1)             ; load addr
     147 00000078 000081240000C1    LDI32 r1, ADC_TSC_STEPCONFIG_1_MASK                  ;
     148 00000080 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     149
     150; step 1 SampleDelay-OpenDelay
     151 00000084 D068802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPDELAY_1)              ; load addr
     152 0000008c 000081240000C1    LDI32 r1, ADC_TSC_STEPDELAY_1_MASK                   ;
     153 00000094 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     154
     155; step 3 config
     156 00000098 D074802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPCONFIG_3)             ; load addr
     157 000000a0 000081240010C1    LDI32 r1, ADC_TSC_STEPCONFIG_3_MASK                  ;
     158 000000a8 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     159
     160; step 3 SampleDelay-OpenDelay
     161 000000ac D078802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPDELAY_3)              ; load addr
     162 000000b4 000081240000C1    LDI32 r1, ADC_TSC_STEPDELAY_3_MASK                   ;
     163 000000bc 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     164
     165; step 4 config
PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    4

     166 000000c0 D07C802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPCONFIG_4)             ; load addr
     167 000000c8 000081240018C1    LDI32 r1, ADC_TSC_STEPCONFIG_4_MASK                  ;
     168 000000d0 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     169
     170; step 4 SampleDelay-OpenDelay
     171 000000d4 D080802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPDELAY_4)              ; load addr
     172 000000dc 000081240000C1    LDI32 r1, ADC_TSC_STEPDELAY_4_MASK                   ;
     173 000000e4 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     174
     175; step 5 config
     176 000000e8 D084802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPCONFIG_5)             ; load addr
     177 000000f0 000081240020C1    LDI32 r1, ADC_TSC_STEPCONFIG_5_MASK                  ;
     178 000000f8 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     179
     180; step 5 SampleDelay-OpenDelay
     181 000000fc D088802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPDELAY_5)              ; load addr
     182 00000104 000081240000C1    LDI32 r1, ADC_TSC_STEPDELAY_5_MASK                   ;
     183 0000010c 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     184
     185; configurar el divisor del reloj
     186 00000110 D04C802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CLKDIV)                   ; load addr for ADS_TSC_CLKDIV
     187 00000118 000081240000C1    LDI32 r1, ADC_TSC_CLKDIV_ADC_CLKDIV                  ; valor minimo
     188 00000120 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en TSC_ADC_CLKDIV
     189
     190; definir el rango de medicion 0-4095
     191 00000124 D048802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_ADCRANGE)                 ; load addr for ADS_TSC_ADCRANGE
     192 0000012c 000081240FFFC1    LDI32 r1, ADC_TSC_ADCRANGE_HIGH_RANGE_DATA           ; 0 - 4095
     193 00000134 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro
     194
     195; IRQ DESAHBILITAR TODAS LAS INTERRUPCIONES
     196 00000138 D030802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_IRQENABLE_CLR)            ; load addr
     197 00000140 FFFF8124FFFFC1    LDI32 r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK             ;
     198 00000148 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1851
     199
     200; IRQ ENABLE END_OF_SECUENCE
     201 0000014c D02C802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_IRQENABLE_SET)            ; load addr
     202 00000154 000281240000C1    LDI32 r1, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE      ; ojo para realiazar un clear hay que hacer un 
     203 0000015c 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     204
     205; IRQ Clear interrupt
     206; CLEAR_IRQ_END_OF_SECUENCE:
     207 00000160 D028802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_IRQSTATUS)                ; load addr
     208 00000168 FFFF8124FFFFC1    LDI32 r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK             ; ojo para realiazar un clear hay que hacer un 
     209 00000170 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     210
     211; debug-------------------------------------------------
     212 00000174 000194240000D4    LDI32 r20, 0x01                                        ; forzamos manualmente un loop de medicion co
     213 0000017c 00000081603C94    SBCO  &r20,  CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_8), 4 ; load flag shared[8] bit0
     214; debug-------------------------------------------------
     215
     216 00000180                 MAIN_LOOP:
     217 00000180 00000091603C80    LBCO &r0,  CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_8), 4 ; load flag shared[8] bit0
     218 00000184 000000D100E002    QBBS ADC_READ_CH, r0, 0                              ; jump is adc_read_flag is set shared[8] bit0
     219 00000188 0000007F0000FE    QBA  MAIN_LOOP                                       ;
     220
PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    5

     221 0000018c                 ADC_READ_CH:
     222 0000018c 0000001F05FEFE    SET r30, pruout_fs_sample_test                       ; debug-> para medir la frecuencia de cada iter
     223
     224; habilitar steps ENABLE VER MANUAL TRM pag. 1839 (solo puede escribirse en STEPCONFIG si ADC_TSC esta
     225 00000190 D054802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPENABLE)               ; load addr
     226 00000198 003A81240000C1    LDI32 r1, ADC_TSC_STEPENABLE_ENABLE_MASK             ;
     227 000001a0 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro. En esta instruccion la 
     228
     229; ADC_TSC module-> enable
     230 000001a4 D040802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CTRL)                     ; load addr
     231 000001ac 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     232 000001b0 0000001F00E1E1    SET   r1, r1, ADC_TSC_CTRL_ENABLE                    ; ojo para realiazar
     233 000001b4 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849 0x00
     234
     235; wait for interrupt
     236 000001b8                 WAIT_IRQ_END_OF_SECUENCE:
     237 000001b8 D028802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_IRQSTATUS)                ; load addr
     238 000001c0 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     239 000001c4 0000001102E1E2    AND   r2, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE      ; Comprobar el estado del bit 1
     240 000001c8 0000005700E2FC    QBEQ  WAIT_IRQ_END_OF_SECUENCE, r2, 0                ; hasta que la interruccion no pase a 1 no se a
     241;  QBA   CLEAR_IRQ_END_OF_SECUENCE                      ; detectada la interrupcion porque termino la 
     242
     243; clear interrupt
     244 000001cc                 CLEAR_IRQ_END_OF_SECUENCE:
     245 000001cc D028802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_IRQSTATUS)                ; load addr
     246 000001d4 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     247 000001d8 0000001F02E1E1    SET   r1, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE      ; ojo para realiazar un clear hay que hacer un 
     248 000001dc 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     249
     250; read count FIFO0
     251 000001e0 D0E4802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_FIFO_0_COUNT)             ; load addr for mem
     252 000001e8 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read r1 <-FIFO_0_COUNT r1 contiene la cantida
     253
     254 000001ec                 ADC_READ_4SAMPLES:
     255 000001ec 0000000501E1E1    SUB   r1, r1, 1                                      ; index-- en cada iteracion:  3-2-1-0
     256 000001f0 D100802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_FIFO_0_DATA)              ; load addr for mem
     257 000001f8 000000F1002082    LBBO  &r2, r0, 0, 4                                  ; load r2 <- FIFO_O_DATA .Se lee extrae un dato
     258 000001fc 000000E0E42382    SBBO  &r2, r3, r4, 4                                 ; load r2 -> ram[] memory. La primer pasada gua
     259 00000200 0000000104E4E4    ADD   r4, r4, OFFSET_4_BYTES                         ; desplazamos de a 4 bytes.
     260 00000204 0000006F00E1FA    QBNE  ADC_READ_4SAMPLES, r1, 0                       ; en este loop se leen solo 4 datos
     261
     262; disable ADC_TSC module
     263 00000208 D040802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_CTRL)                     ; load addr
     264 00000210 000000F1002081    LBBO  &r1, r0, 0, 4                                  ; read value mem
     265 00000214 0000001D00E1E1    CLR   r1, r1, ADC_TSC_CTRL_ENABLE                    ; disable module
     266 00000218 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; TRM pag. 1849
     267
     268; deshabilitar steps
     269 0000021c D054802444E0C0    LDI32 r0, (ADC_TSC|ADC_TSC_STEPENABLE)               ; load addr
     270 00000224 000081240000C1    LDI32 r1, ADC_TSC_STEPENABLE_DISABLE_MASK            ; usamos mascaras cuando queremos configurar mu
     271 0000022c 000000E1002081    SBBO  &r1, r0, 0, 4                                  ; escribir en registro. En esta instruccion la 
     272
     273 00000230 0000001D05FEFE    CLR r30, pruout_fs_sample_test                       ; debug-> tiempo de cada conversion 4 muestras
     274
     275; frecuencia de muestreo
PRU Assembler Unix v2.3.3 Sun Mar 16 16:56:34 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    6

     276 00000234 C35080240000C0    LDI32 r0, SAMPLE_PERIOD                              ;
     277 0000023c                 LEVEL_SAMPLE_PERIOD:
     278 0000023c 0000000501E0E0    SUB  r0, r0, 1                                       ; index--
     279 00000240 0000006F00E0FF    QBNE LEVEL_SAMPLE_PERIOD, r0, 0                      ;
     280
     281 00000244 00000068E5E402    QBNE DATA_RDY_SET_FLAG, r4, r5                       ; llegamos a la cantidad de muestras por iterac
     282 00000248 0000007F0000D1    QBA  ADC_READ_CH                                     ; si no llegamos seguimos midiendo de a cuatro 
     283
     284 0000024c                 DATA_RDY_SET_FLAG:
     285 0000024c 00000091643C80    LBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; read shared[8]
     286 00000250 0000001D00E0E0    CLR  r0, r0, 0                                       ; clear flag bit0 RAM0[0]-RAM0[4095]
     287 00000254 0000001D01E0E0    CLR  r0, r0, 1                                       ; clear flag bit1 RAM0[4096]-RAM0[8191]
     288 00000258 00000081643C80    SBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; cargamos set flag bit1 en shared[8]
     289
     290 0000025c 00000015000606    XOR  r6.b0, r6.b0, 0                                 ; toggle ram0 addr initial index bit0
     291 00000260 000000C900E602    QBBC SET_RAM_INDEX_N, r6, 0                          ; jump is clr bit0
     292 00000264 000000D100E607    QBBS SET_RAM_INDEX_0, r6, 0                          ; jUmp is set bit0
     293
     294 00000268                 SET_RAM_INDEX_N:
     295 00000268 00000091643C80    LBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; read shared[9]
     296 0000026c 0000001F00E0E0    SET  r0, r0, 0                                       ; activamos el flag bit0 indicando que hay dato
     297 00000270 00000081643C80    SBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; cargamos set flag bit0 en shared[9]
     298 00000274 100084240000C4    LDI32 r4, RAM0_INDEX_N                               ; Cargamos index N para seguir cargando la memo
     299 0000027c 0000007F0000C1    QBA   MAIN_LOOP                                      ;
     300 00000280                 SET_RAM_INDEX_0:
     301 00000280 00000091643C80    LBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; read shared[9]
     302 00000284 0000001F01E0E0    SET  r0, r0, 1                                       ; activamos el flag bit1 indicando que hay dato
     303 00000288 00000081643C80    SBCO &r0, CONST_PRUSHAREDRAM, (CNT_OFFSET+SHD_9), 4  ; cargamos set flag bit1 en shared[9]
     304 0000028c 000084240000C4    LDI32 r4, RAM0_INDEX_0                               ; cargamos el indix 0 para escribir desde el pr
     305 00000294 0000007F0000BB    QBA   MAIN_LOOP                                      ;
     306
     307 00000298 00239F240000DF    LDI32   R31, (PRU0_R31_VEC_VALID|PRU_EVTOUT_0)       ;
     308 000002a0 0000002A000000    HALT                                                 ; we should never actually get here

No Assembly Errors, No Assembly Warnings
