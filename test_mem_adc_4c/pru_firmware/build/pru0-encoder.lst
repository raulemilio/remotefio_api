PRU Assembler Unix v2.3.3 Sat Apr  5 11:47:59 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    1

       1; Raul Emilio Romero
       2;       27-01-2025
       3; Este programa registra 1024 muestras por canal a una frecuencia de muestreo de fs=172kHz
       4; tiene dos flanco configurables para verificar que el tiempo total de registro es de aprox 5,8 ms
       5
       6; PRU setup definitions
       7        .asg C28,    CONST_PRUSHAREDRAM                 ; AM335x_PRU.cmd
       8
       9        .asg 0x22000, PRU0_CTRL
      10        .asg 0x24000, PRU1_CTRL                         ; page 19
      11
      12        .asg 0x000, PRU0_RAM
      13        .asg 0x100, SHARED_RAM                          ; This is so prudebug can find it.
      14        .asg 64, CNT_OFFSET
      15
      16        .asg 0x00000000, ram0_addr                      ; Estamos usando ram0 para guardar los datos
      17        .asg 0x04, ram0_offset                          ; Cada dato tiene 4 bytes
      18
      19        ; Registros del modulo clk
      20        .asg 0x44e00400, CM_WKUP                        ; addr base. TRM pag.179
      21        .asg 0xBC, CM_WKUP_ADC_TSC_CLKCTRL              ; clk offset TRM pag.1315
      22        .asg 0x02, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE       ; TRM pag.1369
      23
      24        ; Registros especificos del modulo ADC_TSC
      25        .asg 0x44e0d000, ADC_TSC                        ; TRM pag.180
      26        .asg 0x40, ADC_TSC_CTRL                         ; Registro de control del modulo
      27        .asg 0x00, ADC_TSC_CTRL_ENABLE                  ;
      28        .asg 0x01, ADC_TSC_CTRL_STEP_ID_TAG             ;
      29        .asg 0x02, ADC_TSC_CTRL_STEPCONFIG_PROTECT      ;
      30
      31        .asg 0x64, ADC_TSC_STEPCONFIG_1                 ; ch0
      32        .asg 0x00, ADC_TSC_STEPCONFIG_1_MASK            ; SW mode, single ended, one shot mode, fifo 0
      33        ;.asg 0x20800000, ADC_TSC_STEPCONFIG_1_MASK     ; SW mode, differential pair enable, one shot 
      34        .asg 0x68, ADC_TSC_STEPDELAY_1                  ; TRM pag. 1859
      35        .asg 0x00, ADC_TSC_STEPDELAY_1_MASK             ; OpenDly0 SampleDly0
      36
      37        .asg 0x74, ADC_TSC_STEPCONFIG_3                 ; ch2
      38        .asg 0x00100000, ADC_TSC_STEPCONFIG_3_MASK      ; SW mode, single ended, one shot mode, fifo 0
      39
      40        .asg 0x78, ADC_TSC_STEPDELAY_3                  ; TRM pag. 1859
      41        .asg 0x00, ADC_TSC_STEPDELAY_3_MASK             ; OpenDly0 SampleDly0
      42
      43        .asg 0x7C, ADC_TSC_STEPCONFIG_4                 ; ch3
      44        .asg 0x00180000, ADC_TSC_STEPCONFIG_4_MASK      ; SW mode, single ended, one shot mode, fifo 0
      45
      46        .asg 0x80, ADC_TSC_STEPDELAY_4                  ; TRM pag. 1859
      47        .asg 0x00, ADC_TSC_STEPDELAY_4_MASK             ; OpenDly0 SampleDly0
      48
      49        .asg 0x84, ADC_TSC_STEPCONFIG_5                 ; ch5
      50        .asg 0x00200000, ADC_TSC_STEPCONFIG_5_MASK      ; SW mode, single ended, one shot mode, fifo 0
      51        .asg 0x88, ADC_TSC_STEPDELAY_5                  ; TRM pag. 1859
      52        .asg 0x00, ADC_TSC_STEPDELAY_5_MASK             ; OpenDly0 SampleDly0
      53
      54        .asg 0x4C, ADC_TSC_CLKDIV                       ; clk
      55        .asg 0x00, ADC_TSC_CLKDIV_ADC_CLKDIV            ; valor a cargar para la division del clk. Car
PRU Assembler Unix v2.3.3 Sat Apr  5 11:47:59 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    2

      56
      57        .asg 0x48, ADC_TSC_ADCRANGE                     ;
      58        .asg (0xFFF<<16), ADC_TSC_ADCRANGE_HIGH_RANGE_DATA; Cargamos 4095 en los bits 27-16. TRM pag. 
      59
      60        .asg 0x54, ADC_TSC_STEPENABLE                   ; Registro para habilitar los steps
      61        .asg 0x3A, ADC_TSC_STEPENABLE_ENABLE_MASK       ; Un canal (0000 0010 -> 0x02) Cuatro canales 
      62        .asg 0x00, ADC_TSC_STEPENABLE_DISABLE_MASK      ; Se desahbilitan todos los canales
      63
      64        .asg 0xE4, ADC_TSC_FIFO_0_COUNT                 ; Registro de conteo de datos en FIFO0
      65        .asg 0x100, ADC_TSC_FIFO_0_DATA                 ; Registro FIFO0
      66        .asg 0xFFF, MASK_12_BIT                         ; FIFO0_DATA
      67
      68        ; end-of-sequence interrupt
      69        .asg 0x28, ADC_TSC_IRQSTATUS                    ;
      70        .asg 0x02, ADC_TSC_IRQSTATUS_END_OF_SECUENCE    ; Cuidado aca el bit es el 0x02 pero debe conf
      71
      72        .asg 0x30, ADC_TSC_IRQENABLE_CLR                ;
      73        .asg 0xFFFFFFFF, ADC_TSC_IRQENABLE_CLR_ALL_MASK ; Deshabilitar todas las interrupciones para l
      74
      75        .asg 0x2C, ADC_TSC_IRQENABLE_SET                ;
      76        .asg 0x00, ADC_TSC_IRQENABLE_SET_RESET_MASK     ;
      77
      78        .asg 0x02, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; aviso que termino la secuencia de medicion
      79;       .asg 0x0F, ADC_TSC_IRQENABLE_SET_FIFO_0_THRESHOLD; aviso que todos los datos estan disponibles
      80
      81        .asg r30.t5, pruout_fs_sample_test               ; Debug-> usamos esta salida para validad fs.
      82
      83        .asg 0x04, OFFSET_4_BYTES                        ; EL tamanio del dato es 4 bytes. Para 2 byte
      84        .asg 0x4000, N_SAMPLE                            ; Muestras a guardar en cada iteracion 0x1000
      85        .asg 0x100, DELAY_S                              ; fs aprox 99799->1KHz. 1000->
      86
      87        .clink
      88        .global start
      89
      90 00000000                 start:
      91; INICIALIZACION
      92 00000000 000085240000C5          LDI32   r5, PRU0_RAM                            ; no usar este registro para otra cosa cananl 
      93 00000008 0000002EFF8186          ZERO    &r6, 4                                  ; Para que el primer dato sea en ram0[0]
      94 0000000c 400087240000C7          LDI32   r7, N_SAMPLE                            ;
      95 00000014 0000001D05FEFE          CLR     r30, pruout_fs_sample_test               ; pru0_pru_r30_5 as an output P9_27
      96
      97; ADC CONFIG------------------------------------------------------------------------------------------
      98; CM_WKUP
      99; Habilitar el relor del modulo ADC en CM_WKUP
     100 00000018 04BC802444E0C0          LDI32   r0, (CM_WKUP | CM_WKUP_ADC_TSC_CLKCTRL) ; Cargamos en r0 la addr del registro CLKCTRL 
     101 00000020 000281240000C1          LDI32   r1, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE      ; Cargamos el valor 0x02 en r1 que habilita en
     102 00000028 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Cargamos a donde apunta r0 el valor contenid
     103;       LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos el valor cargado. Cargam
     104
     105; ADC_TSC module-> disabe BIT0
     106 0000002c D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     107 00000034 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     108 00000038 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     109 0000003c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849 0b0110
     110
PRU Assembler Unix v2.3.3 Sat Apr  5 11:47:59 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    3

     111; ADC_TSC module -> Enable StepConfig step ID tag BIT1
     112 00000040 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     113 00000048 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     114 0000004c 0000001D01E1E1          CLR     r1, r1, ADC_TSC_CTRL_STEP_ID_TAG        ; enable-> SET | disable-> CLR
     115 00000050 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     116
     117; ADC_TSC module -> Enable StepConfig Protect Are not protected (writable) BIT2. Tenemos que habilitar
     118 00000054 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     119 0000005c 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     120 00000060 0000001F02E1E1          SET     r1, r1, ADC_TSC_CTRL_STEPCONFIG_PROTECT ;
     121 00000064 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     122
     123; Step 1 config
     124 00000068 D064802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_1)    ; load addr
     125 00000070 000081240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_1_MASK           ;
     126 00000078 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     127
     128; Step 1 SampleDelay-OpenDelay
     129 0000007c D068802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_1)     ; load addr
     130 00000084 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_1_MASK            ;
     131 0000008c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     132
     133; Step 3 config
     134 00000090 D074802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_3)    ; load addr
     135 00000098 000081240010C1          LDI32   r1, ADC_TSC_STEPCONFIG_3_MASK           ;
     136 000000a0 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     137
     138; Step 3 SampleDelay-OpenDelay
     139 000000a4 D078802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_3)     ; load addr
     140 000000ac 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_3_MASK            ;
     141 000000b4 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     142
     143; Step 4 config
     144 000000b8 D07C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_4)    ; load addr
     145 000000c0 000081240018C1          LDI32   r1, ADC_TSC_STEPCONFIG_4_MASK           ;
     146 000000c8 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     147
     148; Step 4 SampleDelay-OpenDelay
     149 000000cc D080802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_4)     ; load addr
     150 000000d4 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_4_MASK            ;
     151 000000dc 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     152
     153; Step 5 config
     154 000000e0 D084802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_5)    ; load addr
     155 000000e8 000081240020C1          LDI32   r1, ADC_TSC_STEPCONFIG_5_MASK           ;
     156 000000f0 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     157
     158; Step 5 SampleDelay-OpenDelay
     159 000000f4 D088802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_5)     ; load addr
     160 000000fc 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_5_MASK            ;
     161 00000104 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     162
     163; Configurar el divisor del reloj
     164 00000108 D04C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CLKDIV)          ; load addr for ADS_TSC_CLKDIV
     165 00000110 000081240000C1          LDI32   r1, ADC_TSC_CLKDIV_ADC_CLKDIV           ; valor minimo
PRU Assembler Unix v2.3.3 Sat Apr  5 11:47:59 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    4

     166 00000118 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en TSC_ADC_CLKDIV
     167
     168; Definir el rango de medicion 0-4095
     169 0000011c D048802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_ADCRANGE)        ; load addr for ADS_TSC_ADCRANGE
     170 00000124 000081240FFFC1          LDI32   r1, ADC_TSC_ADCRANGE_HIGH_RANGE_DATA    ; 0-4095
     171 0000012c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     172
     173;-IRQ-------------------------------------------------------------------------------------------------
     174; IRQ DESAHBILITAR TODAS LAS INTERRUPCIONES
     175 00000130 D030802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_CLR)   ; load addr
     176 00000138 FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ;
     177 00000140 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1851
     178
     179;IRQ ENABLE END_OF_SECUENCE
     180 00000144 D02C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_SET)    ; load addr
     181 0000014c 000281240000C1          LDI32   r1, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     182 00000154 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     183
     184; IRQ Clear interrupt
     185;CLEAR_IRQ_END_OF_SECUENCE:
     186 00000158 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)       ; load addr
     187 00000160 FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ; ojo para realiazar un clear hay que hacer un
     188 00000168 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     189
     190; LOOP SAMPLE-----------------------------------------------------------------------------------------
     191
     192;       SET r30, pruout_fs_sample_test                  ; Debug-> para el tiempo total de adquisicion
     193
     194;Get sample loop
     195 0000016c                 GET_SAMPLE_LOOP:
     196
     197 0000016c 0000001F05FEFE          SET r30, pruout_fs_sample_test                  ; Debug-> para ver cada iteracion
     198
     199; Habilitar steps ENABLE VER MANUAL TRM pag. 1839 (solo puede escribirse en STEPCONFIG si ADC_TSC esta
     200 00000170 D054802444E0C0         LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     201 00000178 003A81240000C1         LDI32   r1, ADC_TSC_STEPENABLE_ENABLE_MASK      ;
     202 00000180 000000E1002081         SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la 
     203
     204; ADC_TSC module-> enable
     205 00000184 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     206 0000018c 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     207 00000190 0000001F00E1E1          SET     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     208 00000194 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849 0x00
     209
     210; Wait for interrupt
     211 00000198                 WAIT_IRQ_END_OF_SECUENCE:
     212 00000198 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)         ; load addr
     213 000001a0 000000F1002081          LBBO    &r1, r0, 0, 4                             ; read value mem
     214 000001a4 0000001102E1E2          AND     r2, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE ; Comprobar el estado del bit 1
     215 000001a8 0000005700E2FC          QBEQ    WAIT_IRQ_END_OF_SECUENCE, r2, 0           ; hasta que la interruccion no pase a 1 no s
     216 000001ac 00000079000001          QBA     CLEAR_IRQ_END_OF_SECUENCE                 ; Detectada la interrupcion porque termino l
     217
     218; Clear interrupt
     219 000001b0                 CLEAR_IRQ_END_OF_SECUENCE:
     220 000001b0 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)        ; load addr
PRU Assembler Unix v2.3.3 Sat Apr  5 11:47:59 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    5

     221 000001b8 000000F1002081          LBBO    &r1, r0, 0, 4                            ; read value mem
     222 000001bc 0000001F02E1E1          SET     r1, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     223 000001c0 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     224
     225; Read count FIFO0
     226 000001c4 D0E4802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_COUNT)    ; load addr for mem
     227 000001cc 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read r1 <-FIFO_0_COUNT
     228
     229 000001d0                 GET_SAMPLE_LOOP_FOR_START:
     230 000001d0 0000000501E1E1          SUB     r1, r1, 1                               ; index--
     231 000001d4 D100802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_DATA)     ; load addr for mem
     232 000001dc 000000F1002084          LBBO    &r4, r0, 0, 4                           ; load r4 <- FIFO_O_DATA
     233 000001e0 000000E0E62584          SBBO    &r4, r5, r6, 4                          ; load r4 -> ram[] memory. La primer pasada gu
     234 000001e4 0000000104E6E6          ADD     r6, r6, OFFSET_4_BYTES                  ; sumamos de a 4 bytes. Desde 0 hasta 4096
     235 000001e8 0000006F00E1FA          QBNE    GET_SAMPLE_LOOP_FOR_START, r1, 0        ;
     236
     237; Disable ADC_TSC module
     238 000001ec D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     239 000001f4 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     240 000001f8 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; disable module
     241 000001fc 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     242
     243; Deshabilitar steps
     244 00000200 D054802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     245 00000208 000081240000C1          LDI32   r1, ADC_TSC_STEPENABLE_DISABLE_MASK     ; Usamos mascaras cuando queremos configurar m
     246 00000210 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la
     247
     248 00000214 0000001D05FEFE          CLR r30, pruout_fs_sample_test                  ; Debug-> tiempo de cada conversion
     249
     250 00000218 010082240000C2          LDI32   r2, DELAY_S                             ;
     251
     252 00000220                 DELAY_SAMPLE:
     253 00000220 0000000501E2E2          SUB     r2, r2, 1                               ; index--
     254 00000224 0000006F00E2FF          QBNE    DELAY_SAMPLE, r2, 0                     ;
     255;-----------------------------------------------------------------------------------------------------
     256
     257 00000228 0000006EE7E6D1          QBNE    GET_SAMPLE_LOOP, r6, r7                 ;
     258 0000022c 000086240000C6          LDI32   r6, 0                                   ;
     259 00000234 0000007F0000CE          QBA     GET_SAMPLE_LOOP
     260;       CLR r30, pruout_fs_sample_test                  ; Debug-> tiempode conversion total
     261
     262 00000238 0000002A000000          HALT    ; we should never actually get here

No Assembly Errors, No Assembly Warnings
