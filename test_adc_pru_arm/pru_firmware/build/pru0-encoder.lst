PRU Assembler Unix v2.3.3 Thu Feb  6 22:13:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    1

       1; Raul Emilio Romero
       2;       27-01-2025
       3
       4; PRU setup definitions
       5;       .asg C4,     CONST_SYSCFG
       6        .asg C28,    CONST_PRUSHAREDRAM                 ; AM335x_PRU.cmd
       7
       8        .asg 0x22000, PRU0_CTRL
       9        .asg 0x24000, PRU1_CTRL                         ; page 19
      10;       .asg 0x28, CTPPR0                               ; page 75
      11
      12        .asg 0x000, PRU0_RAM
      13        .asg 0x020, PRU1_RAM
      14        .asg 0x100, SHARED_RAM                          ; This is so prudebug can find it.
      15        .asg 64, CNT_OFFSET
      16
      17        .asg 0x00000000, ram0_addr                      ; Estamos usando ram0 para guardar los datos
      18
      19        ; Resgistro GPIO
      20        .asg 0x44e07000, GPIO0                          ; GPIO Bank 0, See the AM335x TRM
      21        .asg 0x190, GPIO_CLRDATAOUT                     ; for clearing the GPIO registers offset
      22        .asg 0x194, GPIO_SETDATAOUT                     ; for setting the GPIO registers
      23        .asg 0x138, GPIO_DATAIN                         ; for reading the GPIO registers
      24        .asg 1<<30, GPIO0_30                            ; P9_11/P2.05 gpio0[30] Output - bit 30
      25
      26        ; Registros del modulo clk
      27        .asg 0x44e00400, CM_WKUP                        ; addr base. TRM pag.179
      28        .asg 0xBC, CM_WKUP_ADC_TSC_CLKCTRL              ; clk offset TRM pag.1315
      29        .asg 0x02, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE       ; TRM pag.1369
      30
      31        ; Registros especificos del modulo ADC_TSC
      32        .asg 0x44e0d000, ADC_TSC                        ; TRM pag.180
      33        .asg 0x40, ADC_TSC_CTRL                         ; Registro de control del modulo
      34        .asg 0x00, ADC_TSC_CTRL_ENABLE                  ;
      35        .asg 0x01, ADC_TSC_CTRL_STEP_ID_TAG             ;
      36        .asg 0x02, ADC_TSC_CTRL_STEPCONFIG_PROTECT      ;
      37
      38        .asg 0x64, ADC_TSC_STEPCONFIG_1                 ; ch0
      39        .asg 0x00, ADC_TSC_STEPCONFIG_1_MASK            ; SW mode, single ended, one shot mode, fifo 0
      40        ;.asg 0x20800000, ADC_TSC_STEPCONFIG_1_MASK            ; SW mode, differential pair enable, on
      41
      42        .asg 0x68, ADC_TSC_STEPDELAY_1                  ; TRM pag. 1859
      43        .asg 0x00, ADC_TSC_STEPDELAY_1_MASK             ; OpenDly0 SampleDly0
      44
      45        .asg 0x4C, ADC_TSC_CLKDIV                       ; clk
      46        .asg 0x00, ADC_TSC_CLKDIV_ADC_CLKDIV            ; valor a cargar para la division del clk. Car
      47
      48        .asg 0x48, ADC_TSC_ADCRANGE                     ;
      49        .asg (0xFFF<<16), ADC_TSC_ADCRANGE_HIGH_RANGE_DATA; Cargamos 4095 en los bits 27-16. TRM pag. 
      50
      51        .asg 0x54, ADC_TSC_STEPENABLE                   ; Registro para habilitar los steps
      52        .asg 0x02, ADC_TSC_STEPENABLE_ENABLE_MASK       ; Se habilita solo el canal 1 (0000 0010) por 
      53        .asg 0x00, ADC_TSC_STEPENABLE_DISABLE_MASK      ; Se desahbilitan todos los canales
      54
      55        .asg 0xE4, ADC_TSC_FIFO_0_COUNT                 ; Registro de conteo de datos en FIFO0
PRU Assembler Unix v2.3.3 Thu Feb  6 22:13:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    2

      56        .asg 0x100, ADC_TSC_FIFO_0_DATA                 ; Registro FIFO0
      57        .asg 0xFFF, MASK_12_BIT                         ; FIFO0_DATA
      58
      59        ; end-of-sequence interrupt
      60        .asg 0x28, ADC_TSC_IRQSTATUS                    ;
      61        .asg 0x02, ADC_TSC_IRQSTATUS_END_OF_SECUENCE    ; Cuidado aca el bit es el 0x02 pero debe conf
      62
      63        .asg 0x30, ADC_TSC_IRQENABLE_CLR                ;
      64        .asg 0xFFFFFFFF, ADC_TSC_IRQENABLE_CLR_ALL_MASK ; Desahbilitar todas las interrupciones para l
      65
      66        .asg 0x2C, ADC_TSC_IRQENABLE_SET                ;
      67        .asg 0x00, ADC_TSC_IRQENABLE_SET_RESET_MASK     ;
      68
      69        .asg 0x02, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; aviso que termino la secuencia de medicion
      70;       .asg 0x0F, ADC_TSC_IRQENABLE_SET_FIFO_0_THRESHOLD; aviso que todos los datos estan disponibles
      71
      72        .asg r30.t5, pruout_fs_sample_test               ; Debug-> usamos esta salida para validad fs.
      73
      74        .asg "99700", DELAY_S                            ; fs aprox 1KHz para un canal
      75        .clink
      76        .global start
      77
      78 00000000                 start:
      79
      80; inicializacion de shared mem
      81 00000000 0000002EFF8180          zero    &r0, 4                                  ; Inicializa r0 en 0
      82 00000004 0000002EFF8181          zero    &r1, 4                                  ; Inicializa r1 en 0
      83 00000008 000085240000C5          LDI32   r5, ram0_addr                           ; no usar este registro para otra cosa
      84
      85;       SBCO    &r0, CONST_PRUSHAREDRAM, CNT_OFFSET, 4  ; Escribe el nuevo valor e
      86;       SBCO    &r1, CONST_PRUSHAREDRAM, CNT_OFFSET+4, 4  ; Escribe el nuevo valor e
      87
      88;       LBCO    &r2, CONST_PRUSHAREDRAM, CNT_OFFSET, 4  ; Escribe el nuevo valor e
      89;       LBCO    &r3, CONST_PRUSHAREDRAM, CNT_OFFSET+4, 4 ; Escribe el nuevo valor e
      90
      91 00000010 0000001D05FEFE          CLR     r30, pruout_fs_sample_test               ; pru0_pru_r30_5 as an output P9_27
      92;-----------------------------------------------------------------------------------------------------
      93
      94; CM_WKUP
      95; Habilitar el relor del modulo ADC en CM_WKUP
      96 00000014 04BC802444E0C0          LDI32   r0, (CM_WKUP | CM_WKUP_ADC_TSC_CLKCTRL) ; Cargamos en r0 la addr del registro CLKCTRL 
      97 0000001c 000281240000C1          LDI32   r1, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE      ; Cargamos el valor 0x02 en r1 que habilita en
      98 00000024 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Cargamos a donde apunta r0 el valor contenid
      99;       LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos el valor cargado. Cargam
     100
     101; ADC_TSC module-> disabe BIT0
     102 00000028 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     103 00000030 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     104 00000034 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     105 00000038 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     106;        LBBO    &r2, r0, 0, 4                           ; Debug->0b0110
     107
     108; ADC_TSC module -> Enable StepConfig step ID tag BIT1
     109 0000003c D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     110 00000044 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
PRU Assembler Unix v2.3.3 Thu Feb  6 22:13:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    3

     111 00000048 0000001F01E1E1          SET     r1, r1, ADC_TSC_CTRL_STEP_ID_TAG        ; ojo
     112 0000004c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     113;        LBBO    &r2, r0, 0, 4                           ; Debug->
     114
     115; ADC_TSC module -> Enable StepConfig Protect Are not protected (writable) BIT2
     116 00000050 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     117 00000058 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     118 0000005c 0000001F02E1E1          SET     r1, r1, ADC_TSC_CTRL_STEPCONFIG_PROTECT ;
     119 00000060 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     120;        LBBO    &r2, r0, 0, 4                           ; Debug->
     121
     122; Step config Importante STEPCONFIG_PROTECT debe ser SET para configurar STEP
     123 00000064 D064802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_1)    ; load addr
     124 0000006c 000081240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_1_MASK           ;
     125 00000074 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     126;        LBBO    &r2, r0, 0, 4                           ; Debug
     127
     128; Step 1 SampleDelay-OpenDelay
     129 00000078 D068802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_1)     ; load addr
     130 00000080 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_1_MASK            ;
     131 00000088 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     132;        LBBO    &r2, r0, 0, 4                          ; Debug
     133
     134; Configurar el divisor del reloj
     135 0000008c D04C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CLKDIV)          ; load addr for ADS_TSC_CLKDIV
     136 00000094 000081240000C1          LDI32   r1, ADC_TSC_CLKDIV_ADC_CLKDIV           ; valor minimo
     137 0000009c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en TSC_ADC_CLKDIV
     138;        LBBO    &r2, r0, 0, 4                           ; Debug->
     139
     140; Definir el rango de medicion 0-4095
     141 000000a0 D048802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_ADCRANGE)        ; load addr for ADS_TSC_ADCRANGE
     142 000000a8 000081240FFFC1          LDI32   r1, ADC_TSC_ADCRANGE_HIGH_RANGE_DATA    ; 0-4095
     143 000000b0 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     144;        LBBO    &r2, r0, 0, 4                          ; Debug
     145
     146; IRQ DESAHBILITAR TODAS LAS INTERRUPCIONES
     147 000000b4 D030802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_CLR)   ; load addr
     148 000000bc FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ;
     149 000000c4 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1851
     150;        LBBO    &r2, r0, 0, 4                           ; Debug-> ojo aca el resultado es 0x00
     151
     152;IRQ ENABLE END_OF_SECUENCE
     153 000000c8 D02C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_SET)    ; load addr
     154 000000d0 000281240000C1          LDI32   r1, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     155 000000d8 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     156;        LBBO    &r2, r0, 0, 4                            ; Debug->
     157
     158; IRQ Clear interrupt
     159;CLEAR_IRQ_END_OF_SECUENCE:
     160 000000dc D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)       ; load addr
     161 000000e4 FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ; ojo para realiazar un clear hay que hacer un
     162 000000ec 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     163;        LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos reset modulo 0x0
     164;-----------------------------------------------------------------------------------------------------
     165
PRU Assembler Unix v2.3.3 Thu Feb  6 22:13:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    4

     166;Get sample loop
     167 000000f0                 GET_SAMPLE_LOOP:
     168 000000f0 0000001F05FEFE          SET r30, pruout_fs_sample_test                  ; Debug->
     169
     170; Habilitar step1 ENABLE VER MANUAL TRM pag. 1839 (solo puede escribirse en STEPCONFIG si ADC_TSC esta
     171 000000f4 D054802444E0C0         LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     172 000000fc 000281240000C1         LDI32   r1, ADC_TSC_STEPENABLE_ENABLE_MASK      ;
     173 00000104 000000E1002081         SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la 
     174;       LBBO    &r2, r0, 0, 4                           ; Debug->
     175
     176; ADC_TSC module-> enable
     177 00000108 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     178 00000110 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     179 00000114 0000001F00E1E1          SET     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     180 00000118 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     181;        LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos reset modulo 0x0
     182
     183; Wait for interrupt
     184 0000011c                 WAIT_IRQ_END_OF_SECUENCE:
     185 0000011c D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)         ; load addr
     186 00000124 000000F1002081          LBBO    &r1, r0, 0, 4                             ; read value mem
     187 00000128 0000001102E1E2          AND     r2, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE ; Comprobar el estado del bit 1
     188 0000012c 0000005700E2FC          QBEQ    WAIT_IRQ_END_OF_SECUENCE, r2, 0           ; hasta que la interruccion no pase a 1 no s
     189 00000130 00000079000001          QBA     CLEAR_IRQ_END_OF_SECUENCE                 ; Detectada la interrupcion porque termino l
     190
     191; Clear interrupt
     192 00000134                 CLEAR_IRQ_END_OF_SECUENCE:
     193 00000134 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)        ; load addr
     194 0000013c 000000F1002081          LBBO    &r1, r0, 0, 4                            ; read value mem
     195 00000140 0000001F02E1E1          SET     r1, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     196 00000144 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     197;        LBBO    &r2, r0, 0, 4                            ; Debug-> verificamos reset modulo 0x0
     198
     199; Read count FIFO0
     200 00000148 D0E4802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_COUNT)    ; load addr for mem
     201 00000150 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read r1->FIFO_0_COUNT
     202 00000154 00000010E1E1E2          MOV     r2, r1                                  ; copiamos r1(N) en r2(index) Notar que para c
     203 00000158 0FFF83240000C3          LDI32   r3, MASK_12_BIT                         ;
     204
     205 00000160                 GET_SAMPLE_LOOP_FOR_START:
     206 00000160 0000000501E2E2          SUB     r2, r2, 1                               ; index--
     207 00000164 D100802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_DATA)     ; load addr for mem
     208 0000016c 000000F1002084          LBBO    &r4, r0, 0, 4                           ; read r3->FIFO_O_DATA
     209 00000170 00000010E3E4E4          AND     r4,r4,r3                                ; mask para guardar solo 12 bits 0x0000_0fff->
     210 00000174 000000E1002584          SBBO    &r4, r5, 0, 4                           ; write to ram[0] memory
     211 00000178 0000006F00E2FA          QBNE    GET_SAMPLE_LOOP_FOR_START, r2, 0        ;
     212
     213; Disable ADC_TSC module
     214 0000017c D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     215 00000184 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     216 00000188 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; disable module
     217 0000018c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     218;        LBBO    &r2, r0, 0, 4                           ; Debug->
     219
     220; Deshabilitar step1
PRU Assembler Unix v2.3.3 Thu Feb  6 22:13:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    5

     221 00000190 D054802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     222 00000198 000081240000C1          LDI32   r1, ADC_TSC_STEPENABLE_DISABLE_MASK     ; Usamos mascaras cuando queremos configurar m
     223 000001a0 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la
     224;        LBBO    &r2, r0, 0, 4                           ; Debug->
     225
     226 000001a4 0000001D05FEFE         CLR r30, pruout_fs_sample_test                   ; Debug-> Dede estar en esta posicion antes de
     227
     228 000001a8 857482240001C2          LDI32   r2, DELAY_S                             ;
     229 000001b0                 DELAY_SAMPLE:
     230 000001b0 0000000501E2E2          SUB     r2, r2, 1                               ; index--
     231 000001b4 0000006F00E2FF          QBNE    DELAY_SAMPLE, r2, 0        ;
     232;-----------------------------------------------------------------------------------------------------
     233 000001b8 0000007F0000CE          QBA     GET_SAMPLE_LOOP                         ; volvemos a realizar una medicion
     234
     235 000001bc 0000002A000000          HALT    ; we should never actually get here

No Assembly Errors, No Assembly Warnings
