PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    1

       1; Raul Emilio Romero
       2;       27-01-2025
       3
       4; PRU setup definitions
       5;       .asg C4,     CONST_SYSCFG
       6        .asg C28,    CONST_PRUSHAREDRAM                 ; AM335x_PRU.cmd
       7
       8        .asg 0x22000, PRU0_CTRL
       9        .asg 0x24000, PRU1_CTRL                         ; page 19
      10;       .asg 0x28, CTPPR0                               ; page 75
      11
      12        .asg 0x000, PRU0_RAM
      13        .asg 0x020, PRU1_RAM
      14        .asg 0x100, SHARED_RAM                          ; This is so prudebug can find it.
      15        .asg 64, CNT_OFFSET
      16
      17        .asg 0x00000000, ram0_addr                      ; Estamos usando ram0 para guardar los datos
      18        .asg 0x04, ram0_offset                          ; Cada dato tiene 4 bytes
      19
      20        ; Resgistro GPIO
      21        .asg 0x44e07000, GPIO0                          ; GPIO Bank 0, See the AM335x TRM
      22        .asg 0x190, GPIO_CLRDATAOUT                     ; for clearing the GPIO registers offset
      23        .asg 0x194, GPIO_SETDATAOUT                     ; for setting the GPIO registers
      24        .asg 0x138, GPIO_DATAIN                         ; for reading the GPIO registers
      25        .asg 1<<30, GPIO0_30                            ; P9_11/P2.05 gpio0[30] Output - bit 30
      26
      27        ; Registros del modulo clk
      28        .asg 0x44e00400, CM_WKUP                        ; addr base. TRM pag.179
      29        .asg 0xBC, CM_WKUP_ADC_TSC_CLKCTRL              ; clk offset TRM pag.1315
      30        .asg 0x02, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE       ; TRM pag.1369
      31
      32        ; Registros especificos del modulo ADC_TSC
      33        .asg 0x44e0d000, ADC_TSC                        ; TRM pag.180
      34        .asg 0x40, ADC_TSC_CTRL                         ; Registro de control del modulo
      35        .asg 0x00, ADC_TSC_CTRL_ENABLE                  ;
      36        .asg 0x01, ADC_TSC_CTRL_STEP_ID_TAG             ;
      37        .asg 0x02, ADC_TSC_CTRL_STEPCONFIG_PROTECT      ;
      38
      39        .asg 0x64, ADC_TSC_STEPCONFIG_1                 ; ch0
      40        .asg 0x00, ADC_TSC_STEPCONFIG_1_MASK            ; SW mode, single ended, one shot mode, fifo 0
      41        ;.asg 0x20800000, ADC_TSC_STEPCONFIG_1_MASK            ; SW mode, differential pair enable, on
      42        .asg 0x68, ADC_TSC_STEPDELAY_1                  ; TRM pag. 1859
      43        .asg 0x00, ADC_TSC_STEPDELAY_1_MASK             ; OpenDly0 SampleDly0
      44
      45        .asg 0xC6, ADC_TSC_STEPCONFIG_2                 ; ch1
      46        .asg 0x00, ADC_TSC_STEPCONFIG_2_MASK            ; SW mode, single ended, one shot mode, fifo 0
      47        .asg 0x70, ADC_TSC_STEPDELAY_2                  ; TRM pag. 1859
      48        .asg 0x00, ADC_TSC_STEPDELAY_2_MASK             ; OpenDly0 SampleDly0
      49
      50        .asg 0x74, ADC_TSC_STEPCONFIG_3                 ; ch2
      51        .asg 0x78, ADC_TSC_STEPCONFIG_3_MASK            ; SW mode, single ended, one shot mode, fifo 0
      52        .asg 0x70, ADC_TSC_STEPDELAY_3                  ; TRM pag. 1859
      53        .asg 0x00, ADC_TSC_STEPDELAY_3_MASK             ; OpenDly0 SampleDly0
      54
      55        .asg 0x7C, ADC_TSC_STEPCONFIG_4                 ; ch3
PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    2

      56        .asg 0x80, ADC_TSC_STEPCONFIG_4_MASK            ; SW mode, single ended, one shot mode, fifo 0
      57        .asg 0x70, ADC_TSC_STEPDELAY_4                  ; TRM pag. 1859
      58        .asg 0x00, ADC_TSC_STEPDELAY_4_MASK             ; OpenDly0 SampleDly0
      59
      60        .asg 0x4C, ADC_TSC_CLKDIV                       ; clk
      61        .asg 0x00, ADC_TSC_CLKDIV_ADC_CLKDIV            ; valor a cargar para la division del clk. Car
      62
      63        .asg 0x48, ADC_TSC_ADCRANGE                     ;
      64        .asg (0xFFF<<16), ADC_TSC_ADCRANGE_HIGH_RANGE_DATA; Cargamos 4095 en los bits 27-16. TRM pag. 
      65
      66        .asg 0x54, ADC_TSC_STEPENABLE                   ; Registro para habilitar los steps
      67        ;.asg 0x02, ADC_TSC_STEPENABLE_ENABLE_MASK       ; Se habilita solo el canal 1 (0000 0010) por
      68        .asg 0x1E, ADC_TSC_STEPENABLE_ENABLE_MASK       ; Se habilitan los cuatro primeros canales (00
      69        .asg 0x00, ADC_TSC_STEPENABLE_DISABLE_MASK      ; Se desahbilitan todos los canales
      70
      71        .asg 0xE4, ADC_TSC_FIFO_0_COUNT                 ; Registro de conteo de datos en FIFO0
      72        .asg 0x100, ADC_TSC_FIFO_0_DATA                 ; Registro FIFO0
      73        .asg 0xFFF, MASK_12_BIT                         ; FIFO0_DATA
      74
      75        ; end-of-sequence interrupt
      76        .asg 0x28, ADC_TSC_IRQSTATUS                    ;
      77        .asg 0x02, ADC_TSC_IRQSTATUS_END_OF_SECUENCE    ; Cuidado aca el bit es el 0x02 pero debe conf
      78
      79        .asg 0x30, ADC_TSC_IRQENABLE_CLR                ;
      80        .asg 0xFFFFFFFF, ADC_TSC_IRQENABLE_CLR_ALL_MASK ; Desahbilitar todas las interrupciones para l
      81
      82        .asg 0x2C, ADC_TSC_IRQENABLE_SET                ;
      83        .asg 0x00, ADC_TSC_IRQENABLE_SET_RESET_MASK     ;
      84
      85        .asg 0x02, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; aviso que termino la secuencia de medicion
      86;       .asg 0x0F, ADC_TSC_IRQENABLE_SET_FIFO_0_THRESHOLD; aviso que todos los datos estan disponibles
      87
      88        .asg r30.t5, pruout_fs_sample_test               ; Debug-> usamos esta salida para validad fs.
      89
      90        .asg "99700", DELAY_S                            ; fs aprox 1KHz para un canal
      91        .clink
      92        .global start
      93
      94 00000000                 start:
      95
      96; inicializacion de shared mem
      97 00000000 0000002EFF8180          zero    &r0, 4                                  ; Inicializa r0 en 0
      98 00000004 0000002EFF8181          zero    &r1, 4                                  ; Inicializa r1 en 0
      99 00000008 000085240000C5          LDI32   r5, ram0_addr                           ; no usar este registro para otra cosa cananl 
     100
     101;       SBCO    &r0, CONST_PRUSHAREDRAM, CNT_OFFSET, 4  ; Escribe el nuevo valor e
     102;       SBCO    &r1, CONST_PRUSHAREDRAM, CNT_OFFSET+4, 4  ; Escribe el nuevo valor e
     103
     104;       LBCO    &r2, CONST_PRUSHAREDRAM, CNT_OFFSET, 4  ; Escribe el nuevo valor e
     105;       LBCO    &r3, CONST_PRUSHAREDRAM, CNT_OFFSET+4, 4 ; Escribe el nuevo valor e
     106
     107 00000010 0000001D05FEFE          CLR     r30, pruout_fs_sample_test               ; pru0_pru_r30_5 as an output P9_27
     108;-----------------------------------------------------------------------------------------------------
     109
     110; CM_WKUP
PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    3

     111; Habilitar el relor del modulo ADC en CM_WKUP
     112 00000014 04BC802444E0C0          LDI32   r0, (CM_WKUP | CM_WKUP_ADC_TSC_CLKCTRL) ; Cargamos en r0 la addr del registro CLKCTRL 
     113 0000001c 000281240000C1          LDI32   r1, CM_WKUP_ADC_TSC_CLKCTRL_ENABLE      ; Cargamos el valor 0x02 en r1 que habilita en
     114 00000024 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Cargamos a donde apunta r0 el valor contenid
     115;       LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos el valor cargado. Cargam
     116
     117; ADC_TSC module-> disabe BIT0
     118 00000028 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     119 00000030 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     120 00000034 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     121 00000038 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     122;        LBBO    &r2, r0, 0, 4                           ; Debug->0b0110
     123
     124; ADC_TSC module -> Enable StepConfig step ID tag BIT1
     125 0000003c D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     126 00000044 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     127 00000048 0000001F01E1E1          SET     r1, r1, ADC_TSC_CTRL_STEP_ID_TAG        ; ojo
     128 0000004c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     129;        LBBO    &r2, r0, 0, 4                           ; Debug->
     130
     131; ADC_TSC module -> Enable StepConfig Protect Are not protected (writable) BIT2
     132 00000050 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     133 00000058 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     134 0000005c 0000001F02E1E1          SET     r1, r1, ADC_TSC_CTRL_STEPCONFIG_PROTECT ;
     135 00000060 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     136;        LBBO    &r2, r0, 0, 4                           ; Debug->
     137
     138; Step 1 config Importante STEPCONFIG_PROTECT debe ser SET para configurar STEP
     139 00000064 D064802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_1)    ; load addr
     140 0000006c 000081240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_1_MASK           ;
     141 00000074 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     142;        LBBO    &r2, r0, 0, 4                           ; Debug
     143
     144; Step 1 SampleDelay-OpenDelay
     145 00000078 D068802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_1)     ; load addr
     146 00000080 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_1_MASK            ;
     147 00000088 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     148;        LBBO    &r2, r0, 0, 4                          ; Debug
     149
     150; Step 2 config Importante STEPCONFIG_PROTECT debe ser SET para configurar STEP
     151 0000008c D0C6802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_2)    ; load addr
     152 00000094 000081240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_2_MASK           ;
     153 0000009c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     154;        LBBO    &r2, r0, 0, 4                           ; Debug
     155
     156; Step 2 SampleDelay-OpenDelay
     157 000000a0 D070802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_2)     ; load addr
     158 000000a8 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_2_MASK            ;
     159 000000b0 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     160;        LBBO    &r2, r0, 0, 4                          ; Debug
     161
     162; Step 3 config Importante STEPCONFIG_PROTECT debe ser SET para configurar STEP
     163 000000b4 D074802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_3)    ; load addr
     164 000000bc 007881240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_3_MASK           ;
     165 000000c4 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    4

     166;        LBBO    &r2, r0, 0, 4                           ; Debug
     167
     168; Step 3 SampleDelay-OpenDelay
     169 000000c8 D070802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_3)     ; load addr
     170 000000d0 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_3_MASK            ;
     171 000000d8 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     172;        LBBO    &r2, r0, 0, 4                          ; Debug
     173
     174; Step 4 config Importante STEPCONFIG_PROTECT debe ser SET para configurar STEP
     175 000000dc D07C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPCONFIG_4)    ; load addr
     176 000000e4 008081240000C1          LDI32   r1, ADC_TSC_STEPCONFIG_4_MASK           ;
     177 000000ec 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     178;        LBBO    &r2, r0, 0, 4                           ; Debug
     179
     180; Step 4 SampleDelay-OpenDelay
     181 000000f0 D070802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPDELAY_4)     ; load addr
     182 000000f8 000081240000C1          LDI32   r1, ADC_TSC_STEPDELAY_4_MASK            ;
     183 00000100 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     184;        LBBO    &r2, r0, 0, 4                          ; Debug
     185
     186; Configurar el divisor del reloj
     187 00000104 D04C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CLKDIV)          ; load addr for ADS_TSC_CLKDIV
     188 0000010c 000081240000C1          LDI32   r1, ADC_TSC_CLKDIV_ADC_CLKDIV           ; valor minimo
     189 00000114 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en TSC_ADC_CLKDIV
     190;        LBBO    &r2, r0, 0, 4                           ; Debug->
     191
     192; Definir el rango de medicion 0-4095
     193 00000118 D048802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_ADCRANGE)        ; load addr for ADS_TSC_ADCRANGE
     194 00000120 000081240FFFC1          LDI32   r1, ADC_TSC_ADCRANGE_HIGH_RANGE_DATA    ; 0-4095
     195 00000128 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro
     196;        LBBO    &r2, r0, 0, 4                          ; Debug
     197
     198; IRQ DESAHBILITAR TODAS LAS INTERRUPCIONES
     199 0000012c D030802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_CLR)   ; load addr
     200 00000134 FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ;
     201 0000013c 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1851
     202;        LBBO    &r2, r0, 0, 4                           ; Debug-> ojo aca el resultado es 0x00
     203
     204;IRQ ENABLE END_OF_SECUENCE
     205 00000140 D02C802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQENABLE_SET)    ; load addr
     206 00000148 000281240000C1          LDI32   r1, ADC_TSC_IRQENABLE_SET_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     207 00000150 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     208;        LBBO    &r2, r0, 0, 4                            ; Debug->
     209
     210; IRQ Clear interrupt
     211;CLEAR_IRQ_END_OF_SECUENCE:
     212 00000154 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)       ; load addr
     213 0000015c FFFF8124FFFFC1          LDI32   r1, ADC_TSC_IRQENABLE_CLR_ALL_MASK      ; ojo para realiazar un clear hay que hacer un
     214 00000164 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     215;        LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos reset modulo 0x0
     216;-----------------------------------------------------------------------------------------------------
     217
     218;Get sample loop
     219 00000168                 GET_SAMPLE_LOOP:
     220 00000168 0000001F05FEFE          SET r30, pruout_fs_sample_test                  ; Debug->
PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    5

     221
     222; Habilitar step1 ENABLE VER MANUAL TRM pag. 1839 (solo puede escribirse en STEPCONFIG si ADC_TSC esta
     223 0000016c D054802444E0C0         LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     224 00000174 001E81240000C1         LDI32   r1, ADC_TSC_STEPENABLE_ENABLE_MASK      ;
     225 0000017c 000000E1002081         SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la 
     226;       LBBO    &r2, r0, 0, 4                           ; Debug->
     227
     228; ADC_TSC module-> enable
     229 00000180 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     230 00000188 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     231 0000018c 0000001F00E1E1          SET     r1, r1, ADC_TSC_CTRL_ENABLE             ; ojo para realiazar
     232 00000190 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     233;        LBBO    &r2, r0, 0, 4                           ; Debug-> verificamos reset modulo 0x0
     234
     235; Wait for interrupt
     236 00000194                 WAIT_IRQ_END_OF_SECUENCE:
     237 00000194 D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)         ; load addr
     238 0000019c 000000F1002081          LBBO    &r1, r0, 0, 4                             ; read value mem
     239 000001a0 0000001102E1E2          AND     r2, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE ; Comprobar el estado del bit 1
     240 000001a4 0000005700E2FC          QBEQ    WAIT_IRQ_END_OF_SECUENCE, r2, 0           ; hasta que la interruccion no pase a 1 no s
     241 000001a8 00000079000001          QBA     CLEAR_IRQ_END_OF_SECUENCE                 ; Detectada la interrupcion porque termino l
     242
     243; Clear interrupt
     244 000001ac                 CLEAR_IRQ_END_OF_SECUENCE:
     245 000001ac D028802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_IRQSTATUS)        ; load addr
     246 000001b4 000000F1002081          LBBO    &r1, r0, 0, 4                            ; read value mem
     247 000001b8 0000001F02E1E1          SET     r1, r1, ADC_TSC_IRQSTATUS_END_OF_SECUENCE; ojo para realiazar un clear hay que hacer u
     248 000001bc 000000E1002081          SBBO    &r1, r0, 0, 4                            ; TRM pag. 1849
     249;        LBBO    &r2, r0, 0, 4                            ; Debug-> verificamos reset modulo 0x0
     250
     251; Read count FIFO0
     252 000001c0 D0E4802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_COUNT)    ; load addr for mem
     253 000001c8 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read r1->FIFO_0_COUNT
     254 000001cc 00000010E1E1E2          MOV     r2, r1                                  ; copiamos r1(N) en r2(index) Notar que para c
     255 000001d0 0FFF83240000C3          LDI32   r3, MASK_12_BIT                         ;
     256
     257 000001d8                 GET_SAMPLE_LOOP_FOR_START:
     258 000001d8 0000000501E2E2          SUB     r2, r2, 1                               ; index--
     259 000001dc D100802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_FIFO_0_DATA)     ; load addr for mem
     260 000001e4 000000F1002084          LBBO    &r4, r0, 0, 4                           ; read r3->FIFO_O_DATA
     261 000001e8 00000010E3E4E4          AND     r4,r4,r3                                ; mask para guardar solo 12 bits 0x0000_0fff->
     262 000001ec 000000E0E22584          SBBO    &r4, r5, r2, 4                          ; write to ram[0] memory. La primer pasada gua
     263 000001f0 0000006F00E2FA          QBNE    GET_SAMPLE_LOOP_FOR_START, r2, 0        ;
     264
     265; Disable ADC_TSC module
     266 000001f4 D040802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_CTRL)            ; load addr
     267 000001fc 000000F1002081          LBBO    &r1, r0, 0, 4                           ; read value mem
     268 00000200 0000001D00E1E1          CLR     r1, r1, ADC_TSC_CTRL_ENABLE             ; disable module
     269 00000204 000000E1002081          SBBO    &r1, r0, 0, 4                           ; TRM pag. 1849
     270;        LBBO    &r2, r0, 0, 4                           ; Debug->
     271
     272; Deshabilitar step 1-4
     273 00000208 D054802444E0C0          LDI32   r0, (ADC_TSC | ADC_TSC_STEPENABLE)      ; load addr
     274 00000210 000081240000C1          LDI32   r1, ADC_TSC_STEPENABLE_DISABLE_MASK     ; Usamos mascaras cuando queremos configurar m
     275 00000218 000000E1002081          SBBO    &r1, r0, 0, 4                           ; Escribir en registro. En esta instruccion la
PRU Assembler Unix v2.3.3 Sat Feb  8 14:41:43 2025

Tools Copyright (c) 2012-2018 Texas Instruments Incorporated
src/pru0-encoder.asm                                                 PAGE    6

     276;        LBBO    &r2, r0, 0, 4                           ; Debug->
     277
     278 0000021c 0000001D05FEFE         CLR r30, pruout_fs_sample_test                   ; Debug-> Dede estar en esta posicion antes de
     279
     280 00000220 857482240001C2          LDI32   r2, DELAY_S                             ;
     281 00000228                 DELAY_SAMPLE:
     282 00000228 0000000501E2E2          SUB     r2, r2, 1                               ; index--
     283 0000022c 0000006F00E2FF          QBNE    DELAY_SAMPLE, r2, 0        ;
     284;-----------------------------------------------------------------------------------------------------
     285 00000230 0000007F0000CE          QBA     GET_SAMPLE_LOOP                         ; volvemos a realizar una medicion
     286
     287 00000234 0000002A000000          HALT    ; we should never actually get here

No Assembly Errors, No Assembly Warnings
