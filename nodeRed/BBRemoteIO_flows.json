[
    {
        "id": "b8967e6c4abde353",
        "type": "tab",
        "label": "LOGS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b7e0e36eaf59013",
        "type": "tab",
        "label": "GPIO_INPUT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16971a7f593971f9",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3277e8bb7a784f46",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9cd44cc62cd97f0",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1d6d6f9846b9e29",
        "type": "tab",
        "label": "Motor Acceleration Demo",
        "disabled": false,
        "info": ""
    },
    {
        "id": "204d032121ef1f2c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "109b7ce033a3b582",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1",
        "type": "tab",
        "label": "GPIO Mode",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5b75dcb562ab5fd8",
        "type": "tab",
        "label": "GPIO Mode",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3d3c2c86efe1095d",
        "type": "tab",
        "label": "GPIO Mode",
        "disabled": false,
        "info": ""
    },
    {
        "id": "tab1",
        "type": "tab",
        "label": "Enviar GPIO Mode",
        "disabled": false,
        "info": ""
    },
    {
        "id": "03205c606c99882c",
        "type": "tab",
        "label": "GPIO_OUTPUT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "693713ade92e377d",
        "type": "tab",
        "label": "MOTOR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "62edeeffab35bf12",
        "type": "tab",
        "label": "ADC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ee27f07affeb044c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2549293b328add5d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "30cee99a048b5c93",
        "type": "ui_tab",
        "name": "GPIO",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "661d094117e060d3",
        "type": "ui_group",
        "name": "Gpio input indicator",
        "tab": "30cee99a048b5c93",
        "order": 3,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b1b11111.111111",
        "type": "ui_group",
        "name": "Gpio select control",
        "tab": "30cee99a048b5c93",
        "order": 4,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e6e58c02e5a7f501",
        "type": "ui_group",
        "name": "Gpio  button control",
        "tab": "30cee99a048b5c93",
        "order": 5,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d9f7b3ee5ffe864b",
        "type": "ui_tab",
        "name": "MOTOR",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8fb18ca85539c5d3",
        "type": "ui_group",
        "name": "Enable control",
        "tab": "d9f7b3ee5ffe864b",
        "order": 1,
        "disp": true,
        "width": 3,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8c1aaa423b174586",
        "type": "ui_group",
        "name": "Direction control",
        "tab": "d9f7b3ee5ffe864b",
        "order": 3,
        "disp": true,
        "width": 3,
        "collapse": false,
        "className": ""
    },
    {
        "id": "9bb9dc7f18611a59",
        "type": "ui_group",
        "name": "Step time control",
        "tab": "d9f7b3ee5ffe864b",
        "order": 5,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a0bb5838a582ce10",
        "type": "ui_group",
        "name": "Step time 0",
        "tab": "d9f7b3ee5ffe864b",
        "order": 8,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e51c47abdab9d722",
        "type": "ui_group",
        "name": "Direction indicator",
        "tab": "d9f7b3ee5ffe864b",
        "order": 4,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2e51c1e58b2f2a26",
        "type": "ui_group",
        "name": "Enable indicator",
        "tab": "d9f7b3ee5ffe864b",
        "order": 2,
        "disp": true,
        "width": 3,
        "collapse": false,
        "className": ""
    },
    {
        "id": "907edce3d642b8ac",
        "type": "ui_group",
        "name": "Step time 1",
        "tab": "d9f7b3ee5ffe864b",
        "order": 9,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0be7dc5733d3c5a2",
        "type": "ui_group",
        "name": "Step time 2",
        "tab": "d9f7b3ee5ffe864b",
        "order": 10,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c534c2cc743d8d74",
        "type": "ui_group",
        "name": "Step time 3",
        "tab": "d9f7b3ee5ffe864b",
        "order": 11,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d94e13d63798c8df",
        "type": "ui_group",
        "name": "Selector control",
        "tab": "d9f7b3ee5ffe864b",
        "order": 6,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "981532734606cbb6",
        "type": "ui_group",
        "name": "Logs",
        "tab": "d9f7b3ee5ffe864b",
        "order": 12,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ed52eb67d9da056c",
        "type": "ui_group",
        "name": "Gpio output indicator",
        "tab": "30cee99a048b5c93",
        "order": 2,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "edb401d6713f027c",
        "type": "ui_group",
        "name": "Gpio output control",
        "tab": "30cee99a048b5c93",
        "order": 1,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "edd1f1ee0374a5cd",
        "type": "ui_group",
        "name": "Logs",
        "tab": "30cee99a048b5c93",
        "order": 6,
        "disp": true,
        "width": "21",
        "collapse": false,
        "className": ""
    },
    {
        "id": "tab_adc",
        "type": "ui_tab",
        "name": "ADC",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "group_adc",
        "type": "ui_group",
        "name": "Plot",
        "tab": "tab_adc",
        "order": 1,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "89993fb634fc3df1",
        "type": "ui_group",
        "name": "Config control",
        "tab": "tab_adc",
        "order": 2,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "35ec570fde63db2d",
        "type": "ui_group",
        "name": "Logs",
        "tab": "tab_adc",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5daf508229927d35",
        "type": "ui_spacer",
        "z": "693713ade92e377d",
        "name": "spacer",
        "group": "981532734606cbb6",
        "order": 2,
        "width": "5",
        "height": "2"
    },
    {
        "id": "b1a5f87ddd67268a",
        "type": "ui_group",
        "name": "Button control",
        "tab": "d9f7b3ee5ffe864b",
        "order": 7,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1b3e13d0651504bd",
        "type": "ui_spacer",
        "z": "693713ade92e377d",
        "name": "spacer",
        "group": "b1a5f87ddd67268a",
        "order": 2,
        "width": "0",
        "height": "0"
    },
    {
        "id": "30e96a4f1be3116d",
        "type": "ui_spacer",
        "z": "693713ade92e377d",
        "name": "spacer",
        "group": "d94e13d63798c8df",
        "order": 2,
        "width": "0",
        "height": "0"
    },
    {
        "id": "60362c2b6b575234",
        "type": "ui_group",
        "name": "Config plot",
        "tab": "tab_adc",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e73a22caf3ec592",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "60362c2b6b575234",
        "order": 3,
        "width": 4,
        "height": 1
    },
    {
        "id": "7ddb01547e4bc0e5",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "60362c2b6b575234",
        "order": 7,
        "width": "4",
        "height": "3"
    },
    {
        "id": "4cdfcdec2327df17",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "89993fb634fc3df1",
        "order": 7,
        "width": "4",
        "height": "2"
    },
    {
        "id": "24e7f5f96048d6d0",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "60362c2b6b575234",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "b898507c373362d0",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "d94e13d63798c8df",
        "order": 11,
        "width": "0",
        "height": "0"
    },
    {
        "id": "53c8a53bd4382929",
        "type": "ui_spacer",
        "z": "62edeeffab35bf12",
        "name": "spacer",
        "group": "b1a5f87ddd67268a",
        "order": 12,
        "width": "0",
        "height": "0"
    },
    {
        "id": "9969279b6ab37ac7",
        "type": "ui_spacer",
        "z": "b8967e6c4abde353",
        "name": "spacer",
        "group": "b1b11111.111111",
        "order": 2,
        "width": 4,
        "height": 1
    },
    {
        "id": "ef1d99599b739892",
        "type": "ui_spacer",
        "z": "b8967e6c4abde353",
        "name": "spacer",
        "group": "e6e58c02e5a7f501",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "0522d77f619fe957",
        "type": "mqtt in",
        "z": "b8967e6c4abde353",
        "name": "",
        "topic": "BBRemote/logs",
        "qos": "0",
        "datatype": "utf8",
        "broker": "ee27f07affeb044c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 180,
        "wires": [
            [
                "8f83b44b036258bd",
                "1e756fcfd1fe3846",
                "aa2d4c275c4a2df7"
            ]
        ]
    },
    {
        "id": "1eb4b6b065ebbeec",
        "type": "ui_text",
        "z": "b8967e6c4abde353",
        "group": "981532734606cbb6",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Logs motor",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 550,
        "y": 220,
        "wires": []
    },
    {
        "id": "0b45a705fb20da4b",
        "type": "ui_text",
        "z": "b8967e6c4abde353",
        "group": "edd1f1ee0374a5cd",
        "order": 1,
        "width": "13",
        "height": "1",
        "name": "Logs gpio",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "e24bf398c768623e",
        "type": "ui_text",
        "z": "b8967e6c4abde353",
        "group": "35ec570fde63db2d",
        "order": 1,
        "width": "24",
        "height": "1",
        "name": "Logs adc",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "8f83b44b036258bd",
        "type": "function",
        "z": "b8967e6c4abde353",
        "name": "gpio logs",
        "func": "// Inicializar la lista si no existe\nif (!flow.get(\"error_list\")) {\n    flow.set(\"error_list\", []);\n}\n\ntry {\n    const data = JSON.parse(msg.payload);\n    const now = new Date();\n    const timestamp = now.toLocaleString();  // Ej: \"27/04/2025, 14:50:00\"\n\n    let new_message = null;\n\n    if (data.Log) {\n        new_message = `${timestamp} - ${data.Log}`;\n    } else if (data.task && typeof data.task === \"string\" && data.task.toLowerCase().startsWith(\"gpio\")) {\n        if (data.status) {\n            new_message = `${timestamp} - ${data.task}: ${data.status}`;\n        } else {\n            new_message = `${timestamp} - ${data.task}: (sin estado)`;\n        }\n    }\n\n    if (new_message) {\n        let error_list = flow.get(\"error_list\");\n        error_list.push(new_message); // Agregar el nuevo mensaje\n        if (error_list.length > 3) {\n            error_list.shift(); // Mantener solo los últimos 3\n        }\n        flow.set(\"error_list\", error_list);\n\n        msg.payload = error_list.join(\"</br>\"); // Unir los mensajes para mostrar\n        return msg;\n    } else {\n        return null; // No cumple condiciones, no mostrar\n    }\n} catch (e) {\n    msg.payload = \"Error: Payload inválido\";\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "0b45a705fb20da4b"
            ]
        ]
    },
    {
        "id": "1e756fcfd1fe3846",
        "type": "function",
        "z": "b8967e6c4abde353",
        "name": "motor logs",
        "func": "// Inicializar la lista si no existe\nif (!flow.get(\"error_list\")) {\n    flow.set(\"error_list\", []);\n}\n\ntry {\n    const data = JSON.parse(msg.payload);\n    const now = new Date();\n    const timestamp = now.toLocaleString();  // Ej: \"27/04/2025, 14:50:00\"\n\n    let new_message = null;\n\n    if (data.Log) {\n        new_message = `${timestamp} - ${data.Log}`;\n    } else if (data.task && typeof data.task === \"string\" && data.task.toLowerCase().startsWith(\"motor\")) {\n        if (data.status) {\n            new_message = `${timestamp} - ${data.task}: ${data.status}`;\n        } else {\n            new_message = `${timestamp} - ${data.task}: (sin estado)`;\n        }\n    }\n\n    if (new_message) {\n        let error_list = flow.get(\"error_list\");\n        error_list.push(new_message); // Agregar el nuevo mensaje\n        if (error_list.length > 3) {\n            error_list.shift(); // Mantener solo los últimos 3\n        }\n        flow.set(\"error_list\", error_list);\n\n        msg.payload = error_list.join(\"</br>\"); // Unir los mensajes para mostrar\n        return msg;\n    } else {\n        return null; // No cumple condiciones, no mostrar\n    }\n} catch (e) {\n    msg.payload = \"Error: Payload inválido\";\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "1eb4b6b065ebbeec"
            ]
        ]
    },
    {
        "id": "aa2d4c275c4a2df7",
        "type": "function",
        "z": "b8967e6c4abde353",
        "name": "adc logs",
        "func": "// Inicializar la lista si no existe\nif (!flow.get(\"error_list\")) {\n    flow.set(\"error_list\", []);\n}\n\ntry {\n    const data = JSON.parse(msg.payload);\n    const now = new Date();\n    const timestamp = now.toLocaleString();  // Ej: \"27/04/2025, 14:50:00\"\n\n    let new_message = null;\n\n    if (data.Log) {\n        new_message = `${timestamp} - ${data.Log}`;\n    } else if (data.task && typeof data.task === \"string\" && data.task.toLowerCase().startsWith(\"adc\")) {\n        if (data.status) {\n            new_message = `${timestamp} - ${data.task}: ${data.status}`;\n        } else {\n            new_message = `${timestamp} - ${data.task}: (sin estado)`;\n        }\n    }\n\n    if (new_message) {\n        let error_list = flow.get(\"error_list\");\n        error_list.push(new_message); // Agregar el nuevo mensaje\n        if (error_list.length > 3) {\n            error_list.shift(); // Mantener solo los últimos 3\n        }\n        flow.set(\"error_list\", error_list);\n\n        msg.payload = error_list.join(\"</br>\"); // Unir los mensajes para mostrar\n        return msg;\n    } else {\n        return null; // No cumple condiciones, no mostrar\n    }\n} catch (e) {\n    msg.payload = \"Error: Payload inválido\";\n    return msg;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "e24bf398c768623e"
            ]
        ]
    },
    {
        "id": "f61543f0b12aea2d",
        "type": "mqtt in",
        "z": "6b7e0e36eaf59013",
        "name": "",
        "topic": "BBRemote/rsp/gpio/gpio_input",
        "qos": "2",
        "datatype": "json",
        "broker": "ee27f07affeb044c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "b8138e0109bab60a",
                "3eea4bbd36e15e9d"
            ]
        ]
    },
    {
        "id": "b8138e0109bab60a",
        "type": "function",
        "z": "6b7e0e36eaf59013",
        "name": "Separar estados para LEDs",
        "func": "var states = msg.payload.state;\n\nreturn [\n    { payload: states[0] ? true : false },\n    { payload: states[1] ? true : false },\n    { payload: states[2] ? true : false },\n    { payload: states[3] ? true : false }\n];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "0c4f1c7601ec9e66"
            ],
            [
                "bf39d96b6a950b27"
            ],
            [
                "7c4b6da0318ae6a4"
            ],
            [
                "fd0bbe95a7b813fd"
            ]
        ]
    },
    {
        "id": "0c4f1c7601ec9e66",
        "type": "ui_led",
        "z": "6b7e0e36eaf59013",
        "order": 1,
        "group": "661d094117e060d3",
        "width": 0,
        "height": 0,
        "label": "Input 0",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Input 0 indicator",
        "x": 940,
        "y": 100,
        "wires": []
    },
    {
        "id": "bf39d96b6a950b27",
        "type": "ui_led",
        "z": "6b7e0e36eaf59013",
        "order": 2,
        "group": "661d094117e060d3",
        "width": 0,
        "height": 0,
        "label": "Input 1",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Input 1 indicator",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "7c4b6da0318ae6a4",
        "type": "ui_led",
        "z": "6b7e0e36eaf59013",
        "order": 3,
        "group": "661d094117e060d3",
        "width": 0,
        "height": 0,
        "label": "Input 2",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Input 2 indicator",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "fd0bbe95a7b813fd",
        "type": "ui_led",
        "z": "6b7e0e36eaf59013",
        "order": 4,
        "group": "661d094117e060d3",
        "width": 0,
        "height": 0,
        "label": "Input 3",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "Input 3 indicator",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a85c3e790be40fe",
        "type": "mqtt out",
        "z": "6b7e0e36eaf59013",
        "name": "",
        "topic": "BBRemote/cmds/gpio/gpio_input",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1020,
        "y": 580,
        "wires": []
    },
    {
        "id": "a1a11111.111111",
        "type": "ui_dropdown",
        "z": "6b7e0e36eaf59013",
        "name": "Gpio input selector control",
        "label": "Seleccionar modo",
        "tooltip": "",
        "place": "Elegir",
        "group": "b1b11111.111111",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Modo 0",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Modo 1",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Modo 2",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 310,
        "y": 540,
        "wires": [
            [
                "c2c22222.222222"
            ]
        ]
    },
    {
        "id": "c2c22222.222222",
        "type": "function",
        "z": "6b7e0e36eaf59013",
        "name": "Gpio Input guardar modo",
        "func": "global.set(\"in_modo_seleccionado\", msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 540,
        "wires": []
    },
    {
        "id": "d3d33333.333333",
        "type": "ui_button",
        "z": "6b7e0e36eaf59013",
        "name": "Gpio input button control",
        "group": "e6e58c02e5a7f501",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "GET INPUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 310,
        "y": 580,
        "wires": [
            [
                "e4e44444.444444"
            ]
        ]
    },
    {
        "id": "e4e44444.444444",
        "type": "function",
        "z": "6b7e0e36eaf59013",
        "name": "Crear mensaje JSON",
        "func": "let mode = global.get(\"in_modo_seleccionado\");\nif (mode === undefined) {\n    node.warn(\"Modo no seleccionado\");\n    return null;\n}\n\nlet mensaje = {\n    task: \"gpio_input\",\n    input: [0, 1, 2, 3],\n    mode: mode\n};\n\nmsg.payload = JSON.stringify(mensaje);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 580,
        "wires": [
            [
                "8a85c3e790be40fe"
            ]
        ]
    },
    {
        "id": "7d07d12531fb2c70",
        "type": "inject",
        "z": "6b7e0e36eaf59013",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "e4e44444.444444"
            ]
        ]
    },
    {
        "id": "60adf54045137f64",
        "type": "inject",
        "z": "6b7e0e36eaf59013",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 100,
        "y": 540,
        "wires": [
            [
                "a1a11111.111111"
            ]
        ]
    },
    {
        "id": "3eea4bbd36e15e9d",
        "type": "function",
        "z": "6b7e0e36eaf59013",
        "name": "function 1",
        "func": "// Guardamos el timestamp del último mensaje procesado\nlet lastTimestamp = context.get('lastTimestamp') || 0;\nlet currentTimestamp = msg.payload.ts;  // Timestamp del mensaje actual\n\n// Si ya tenemos un timestamp anterior, calculamos la diferencia\nif (lastTimestamp !== 0) {\n    let diff = currentTimestamp - lastTimestamp;  // Diferencia en milisegundos\n    msg.payload = diff;  // Directamente asignamos la diferencia a msg.payload\n} else {\n    msg.payload = 0;  // Si es el primer mensaje, no hay diferencia\n}\n\n// Actualizamos el timestamp actual para el próximo mensaje\ncontext.set('lastTimestamp', currentTimestamp);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 300,
        "wires": [
            [
                "81756e6d480fe6ff"
            ]
        ]
    },
    {
        "id": "81756e6d480fe6ff",
        "type": "ui_text",
        "z": "6b7e0e36eaf59013",
        "group": "edd1f1ee0374a5cd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 910,
        "y": 300,
        "wires": []
    },
    {
        "id": "27424bc5dae48d1b",
        "type": "function",
        "z": "6b7e0e36eaf59013",
        "name": "function 1",
        "func": "let t = context.get('t') || 0;  // Usamos el valor de 't' o 0 si no está definido\nconst samples = 10;  // Cantidad de muestras\nconst interval = 1000;  // Intervalo en milisegundos entre cada timestamp\n\nlet ch0 = [], ch1 = [], ch2 = [], ch3 = [];\nlet timestamps = [];  // Array para almacenar los timestamps de las muestras\n\nfor (let i = 0; i < samples; i++) {\n    // Generamos los valores de los canales aleatorios (0 o 1)\n    ch0.push(Math.round(Math.random()));  // Valor aleatorio 0 o 1\n    ch1.push(Math.round(Math.random()));\n    ch2.push(Math.round(Math.random()));\n    ch3.push(Math.round(Math.random()));\n\n    // Generamos el timestamp para cada muestra basado en el intervalo\n    timestamps.push(Date.now() + i * interval);  // Timestamp incrementado\n}\n\n// Guardamos el valor actual de 't' para la próxima ejecución\ncontext.set('t', t + samples);\n\n// Creamos el mensaje con los datos simulados\nmsg.payload = {\n    channels: {\n        ch0: ch0,\n        ch1: ch1,\n        ch2: ch2,\n        ch3: ch3\n    },\n    timestamps: timestamps\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "eb0cea3a8e637ba0"
            ]
        ]
    },
    {
        "id": "597cf94aa8f56644",
        "type": "inject",
        "z": "6b7e0e36eaf59013",
        "name": "Simular datos ADC",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 340,
        "y": 380,
        "wires": [
            [
                "27424bc5dae48d1b"
            ]
        ]
    },
    {
        "id": "eb0cea3a8e637ba0",
        "type": "ui_template",
        "z": "6b7e0e36eaf59013",
        "group": "edd1f1ee0374a5cd",
        "name": "",
        "order": 1,
        "width": 16,
        "height": 8,
        "format": "<canvas id=\"myChart\" width=\"800\" height=\"400\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n    (function(scope) {\n    let sampleIndex = 0;\n    let maxPoints = 500;\n    let ts = 1;\n    let showLine_set = false;\n    let selectedChannel = \"all\";\n    let savedData = [];\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chart = new Chart(ctx, {\n        type: 'scatter',\n        data: {\n            datasets: [\n                { label: 'ch0', data: [], backgroundColor: 'red', showLine: false, pointRadius: 2 },\n                { label: 'ch1', data: [], backgroundColor: 'blue', showLine: false, pointRadius: 2 },\n                { label: 'ch2', data: [], backgroundColor: 'green', showLine: false, pointRadius: 2 },\n                { label: 'ch3', data: [], backgroundColor: 'orange', showLine: false, pointRadius: 2 }\n            ]\n        },\n        options: {\n            animation: false,\n            scales: {\n                x: {\n                    type: 'linear',\n                    title: {\n                        display: true,\n                        text: '[ms]',\n                        font: { size: 26 }\n                    },\n                    ticks: {\n                        font: { size: 24 }\n                    }\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: '[V]',\n                        font: { size: 26 }\n                    },\n                    ticks: {\n                        font: { size: 24 }\n                    }\n                }\n            }\n        }\n    });\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        if (msg.topic === \"maxPoints\") {\n            maxPoints = msg.payload;\n            return;\n        }\n\n        if (msg.topic === \"ts\") {\n        ts = msg.payload;\n        return;\n        }\n\n        if (msg.topic === \"channel\") {\n            selectedChannel = msg.payload;\n            chart.data.datasets.forEach((ds, i) => {\n                ds.hidden = selectedChannel !== \"all\" && ds.label !== selectedChannel;\n            });\n            chart.update();\n            return;\n        }\n\n        if (msg.topic === \"clear\") {\n            chart.data.datasets.forEach(ds => ds.data = []);\n            sampleIndex = 0;\n            savedData = [];\n            chart.update();\n            return;\n        }\n\n        if (msg.topic === \"download_csv\") {\n            let csvContent = \"sample,ch0,ch1,ch2,ch3\\n\";\n            savedData.forEach(row => {\n                csvContent += `${row.sample},${row.ch0},${row.ch1},${row.ch2},${row.ch3}\\n`;\n            });\n\n            const blob = new Blob([csvContent], { type: \"text/csv\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"datos_adc.csv\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            return;\n        }\n        \n        if (msg.topic === \"showLine\") {\n        showLine_set = msg.payload;\n        chart.data.datasets.forEach((ds) => {\n        ds.showLine = showLine_set;\n        });\n        chart.update();\n        return;\n        }\n\n        if (!msg.payload || !msg.payload.channels) return;\n\n        const ch = msg.payload.channels;\n        const length = ch.ch0.length;\n\n        for (let i = 0; i < length; i++) {\n            if (selectedChannel === \"all\" || selectedChannel === \"ch0\")\n                chart.data.datasets[0].data.push({x: sampleIndex * ts, y: ch.ch0[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch1\")\n                chart.data.datasets[1].data.push({x: sampleIndex * ts, y: ch.ch1[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch2\")\n                chart.data.datasets[2].data.push({x: sampleIndex * ts, y: ch.ch2[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch3\")\n                chart.data.datasets[3].data.push({x: sampleIndex * ts, y: ch.ch3[i]});\n\n            savedData.push({\n                sample: sampleIndex,\n                ch0: ch.ch0[i],\n                ch1: ch.ch1[i],\n                ch2: ch.ch2[i],\n                ch3: ch.ch3[i]\n            });\n\n            sampleIndex++;\n        }\n\n        chart.data.datasets.forEach(ds => {\n            if (ds.data.length > maxPoints) {\n                ds.data.splice(0, ds.data.length - maxPoints);\n            }\n        });\n\n        chart.update();\n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "08767eab60064e39",
        "type": "ui_switch",
        "z": "6b7e0e36eaf59013",
        "name": "showLine",
        "label": "Show line ch",
        "tooltip": "",
        "group": "edd1f1ee0374a5cd",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "showLine",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 580,
        "y": 440,
        "wires": [
            [
                "eb0cea3a8e637ba0"
            ]
        ]
    },
    {
        "id": "generar_datos",
        "type": "function",
        "z": "3277e8bb7a784f46",
        "name": "Generar Datos 1024 Muestras",
        "func": "// Genera 1024 muestras de datos aleatorios para cada canal\nvar ch0 = [];\nvar ch1 = [];\nvar ch2 = [];\nvar ch3 = [];\n\nfor (var i = 0; i < 1024; i++) {\n    ch0.push(Math.floor(Math.random() * 4096)); // 0-4095\n    ch1.push(Math.floor(Math.random() * 4096));\n    ch2.push(Math.floor(Math.random() * 4096));\n    ch3.push(Math.floor(Math.random() * 4096));\n}\n\nmsg.payload = {\n    \"task\": \"adc\",\n    \"channels\": {\n        \"ch0\": ch0,\n        \"ch1\": ch1,\n        \"ch2\": ch2,\n        \"ch3\": ch3\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "separar_canales"
            ]
        ]
    },
    {
        "id": "separar_canales",
        "type": "function",
        "z": "3277e8bb7a784f46",
        "name": "Separar Canales",
        "func": "// Separamos los datos en 4 mensajes\nvar payload = msg.payload;\n\nif (payload.task === \"adc\" && payload.channels) {\n    let ch0 = payload.channels.ch0 || [];\n    let ch1 = payload.channels.ch1 || [];\n    let ch2 = payload.channels.ch2 || [];\n    let ch3 = payload.channels.ch3 || [];\n\n    return [\n        { payload: ch0, topic: \"ch0\" },\n        { payload: ch1, topic: \"ch1\" },\n        { payload: ch2, topic: \"ch2\" },\n        { payload: ch3, topic: \"ch3\" }\n    ];\n}\n\nreturn null;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 120,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "mqtt_in_simulado",
        "type": "inject",
        "z": "3277e8bb7a784f46",
        "name": "Simular Datos ADC",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"task\":\"adc\",\"channels\":{\"ch0\":[],\"ch1\":[],\"ch2\":[],\"ch3\":[]}}",
        "payloadType": "json",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "generar_datos"
            ]
        ]
    },
    {
        "id": "6301072488ff10dc",
        "type": "mqtt in",
        "z": "03205c606c99882c",
        "name": "",
        "topic": "BBRemote/rsp/gpio/gpio_output_get",
        "qos": "2",
        "datatype": "json",
        "broker": "ee27f07affeb044c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 140,
        "wires": [
            [
                "c4e3c63b91e82ea2"
            ]
        ]
    },
    {
        "id": "f288a51b829e449f",
        "type": "ui_button",
        "z": "03205c606c99882c",
        "name": "Gpio output set button control",
        "group": "e6e58c02e5a7f501",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SET OUTPUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 370,
        "y": 640,
        "wires": [
            [
                "468caefc151d20c8"
            ]
        ]
    },
    {
        "id": "468caefc151d20c8",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "Crear mensaje JSON",
        "func": "let mode = global.get(\"gpio_output_set_modo_seleccionado\");\n\nif (mode === undefined) {\n    node.warn(\"Modo no seleccionado\");\n    return null;\n}\n\nlet state = [\n    flow.get(\"gpio_0\") || 0,\n    flow.get(\"gpio_1\") || 0,\n    flow.get(\"gpio_2\") || 0,\n    flow.get(\"gpio_3\") || 0\n];\n\nlet mensaje = {\n    task: \"gpio_output_set\",\n    output: [0, 1, 2, 3],\n    state:state,\n    mode: mode\n};\n\nmsg.payload = mensaje;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "3ade7ef9f883a300"
            ]
        ]
    },
    {
        "id": "3ade7ef9f883a300",
        "type": "mqtt out",
        "z": "03205c606c99882c",
        "name": "",
        "topic": "BBRemote/cmds/gpio/gpio_output_set",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1070,
        "y": 640,
        "wires": []
    },
    {
        "id": "57fb97e4aff2157a",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "Gpio Input guardar modo",
        "func": "global.set(\"gpio_output_set_modo_seleccionado\", msg.payload);\nreturn null;",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "7b666aa9f3dc15c4",
        "type": "ui_dropdown",
        "z": "03205c606c99882c",
        "name": "Gpio output set selector control",
        "label": "Seleccionar modo",
        "tooltip": "",
        "place": "Elegir",
        "group": "b1b11111.111111",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Modo 0",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "57fb97e4aff2157a"
            ]
        ]
    },
    {
        "id": "c4e3c63b91e82ea2",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "Separar estados para LEDs",
        "func": "var states = msg.payload.state;\n\nreturn [\n    { payload: states[0] ? true : false },\n    { payload: states[1] ? true : false },\n    { payload: states[2] ? true : false },\n    { payload: states[3] ? true : false }\n];",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "7adc8583ab26d134"
            ],
            [
                "8d01b60d4dae9a36"
            ],
            [
                "d2d362bdde0d6d6d"
            ],
            [
                "929b786f967cf7d6"
            ]
        ]
    },
    {
        "id": "7adc8583ab26d134",
        "type": "ui_led",
        "z": "03205c606c99882c",
        "order": 1,
        "group": "ed52eb67d9da056c",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "output 0 indicator",
        "x": 1010,
        "y": 120,
        "wires": []
    },
    {
        "id": "8d01b60d4dae9a36",
        "type": "ui_led",
        "z": "03205c606c99882c",
        "order": 2,
        "group": "ed52eb67d9da056c",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "output 1 indicator",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "d2d362bdde0d6d6d",
        "type": "ui_led",
        "z": "03205c606c99882c",
        "order": 3,
        "group": "ed52eb67d9da056c",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "output 2 indicator",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "929b786f967cf7d6",
        "type": "ui_led",
        "z": "03205c606c99882c",
        "order": 4,
        "group": "ed52eb67d9da056c",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "output 3 indicator",
        "x": 1010,
        "y": 240,
        "wires": []
    },
    {
        "id": "3ec078a843beae44",
        "type": "ui_switch",
        "z": "03205c606c99882c",
        "name": "output 0 control",
        "label": "Output 0",
        "tooltip": "",
        "group": "edb401d6713f027c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 760,
        "wires": [
            [
                "fbb9a54c9e6c3adc"
            ]
        ]
    },
    {
        "id": "2c044f0f03399251",
        "type": "ui_switch",
        "z": "03205c606c99882c",
        "name": "output 1 control",
        "label": "Output 1",
        "tooltip": "",
        "group": "edb401d6713f027c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 800,
        "wires": [
            [
                "d3251dbcb52c2072"
            ]
        ]
    },
    {
        "id": "3ff9d8cf22d0da90",
        "type": "ui_switch",
        "z": "03205c606c99882c",
        "name": "output 2 control",
        "label": "Output 2",
        "tooltip": "",
        "group": "edb401d6713f027c",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 840,
        "wires": [
            [
                "cee3b9ffb5ef944f"
            ]
        ]
    },
    {
        "id": "bde84b1ff71f7e25",
        "type": "ui_switch",
        "z": "03205c606c99882c",
        "name": "output 3 control",
        "label": "Output 3",
        "tooltip": "",
        "group": "edb401d6713f027c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 320,
        "y": 880,
        "wires": [
            [
                "5eb39649b9616325"
            ]
        ]
    },
    {
        "id": "fbb9a54c9e6c3adc",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "function 0",
        "func": "flow.set(\"gpio_0\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "d3251dbcb52c2072",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "function 1",
        "func": "flow.set(\"gpio_1\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "cee3b9ffb5ef944f",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "function 2",
        "func": "flow.set(\"gpio_2\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5eb39649b9616325",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "function 3",
        "func": "flow.set(\"gpio_3\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "9835b9c435d805f9",
        "type": "inject",
        "z": "03205c606c99882c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 680,
        "wires": [
            [
                "468caefc151d20c8"
            ]
        ]
    },
    {
        "id": "b1d6203b2dbcbf96",
        "type": "ui_button",
        "z": "03205c606c99882c",
        "name": "Gpio output get button control",
        "group": "e6e58c02e5a7f501",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "GET OUTPUT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 370,
        "y": 460,
        "wires": [
            [
                "e975579849c7af9e"
            ]
        ]
    },
    {
        "id": "e975579849c7af9e",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "Crear mensaje JSON",
        "func": "let mode = global.get(\"gpio_output_get_modo_seleccionado\");\n\nif (mode === undefined) {\n    node.warn(\"Modo no seleccionado\");\n    return null;\n}\n\nlet mensaje = {\n    task: \"gpio_output_get\",\n    output: [0, 1, 2, 3],\n    mode: mode\n};\n\nmsg.payload = JSON.stringify(mensaje);\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "7a211db67f838010"
            ]
        ]
    },
    {
        "id": "7a211db67f838010",
        "type": "mqtt out",
        "z": "03205c606c99882c",
        "name": "",
        "topic": "BBRemote/cmds/gpio/gpio_output_get",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1070,
        "y": 460,
        "wires": []
    },
    {
        "id": "fafb702fef17c372",
        "type": "function",
        "z": "03205c606c99882c",
        "name": "Gpio Input guardar modo",
        "func": "global.set(\"gpio_output_get_modo_seleccionado\", msg.payload);\nreturn null;",
        "outputs": 0,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 420,
        "wires": []
    },
    {
        "id": "0b8cb587bd2efe36",
        "type": "ui_dropdown",
        "z": "03205c606c99882c",
        "name": "Gpio output get selector control",
        "label": "Seleccionar modo",
        "tooltip": "",
        "place": "Elegir",
        "group": "b1b11111.111111",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Modo 0",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "fafb702fef17c372"
            ]
        ]
    },
    {
        "id": "072084ca511eb83a",
        "type": "inject",
        "z": "03205c606c99882c",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "e975579849c7af9e"
            ]
        ]
    },
    {
        "id": "b52554d0887a912a",
        "type": "inject",
        "z": "03205c606c99882c",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "0b8cb587bd2efe36"
            ]
        ]
    },
    {
        "id": "1e017a5543aea849",
        "type": "inject",
        "z": "03205c606c99882c",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "7b666aa9f3dc15c4"
            ]
        ]
    },
    {
        "id": "d8729caf4221c8d6",
        "type": "inject",
        "z": "03205c606c99882c",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "3ec078a843beae44",
                "2c044f0f03399251",
                "3ff9d8cf22d0da90",
                "bde84b1ff71f7e25"
            ]
        ]
    },
    {
        "id": "ff65f4ba6a9e5401",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "Separar motor enables",
        "func": "var ena = msg.payload.ena;\n\nreturn [\n    { payload: ena[0] ? true : false },\n    { payload: ena[1] ? true : false },\n    { payload: ena[2] ? true : false },\n    { payload: ena[3] ? true : false }\n];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "d5ac92c1e54fae57"
            ],
            [
                "3ddc1db47f36c4b3"
            ],
            [
                "86cebfc77518ce11"
            ],
            [
                "c458448f43e13657"
            ]
        ]
    },
    {
        "id": "58436a4532fef3d2",
        "type": "mqtt in",
        "z": "693713ade92e377d",
        "name": "",
        "topic": "BBRemote/rsp/motor/motor_get",
        "qos": "2",
        "datatype": "json",
        "broker": "ee27f07affeb044c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 100,
        "wires": [
            [
                "ff65f4ba6a9e5401",
                "b38054b7ba59a58f",
                "8c15229b2dfc3df4"
            ]
        ]
    },
    {
        "id": "d5ac92c1e54fae57",
        "type": "ui_led",
        "z": "693713ade92e377d",
        "order": 1,
        "group": "2e51c1e58b2f2a26",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "motor 0 enable led ind",
        "x": 980,
        "y": 80,
        "wires": []
    },
    {
        "id": "3ddc1db47f36c4b3",
        "type": "ui_led",
        "z": "693713ade92e377d",
        "order": 2,
        "group": "2e51c1e58b2f2a26",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "motor 1 enable led ind",
        "x": 980,
        "y": 120,
        "wires": []
    },
    {
        "id": "86cebfc77518ce11",
        "type": "ui_led",
        "z": "693713ade92e377d",
        "order": 3,
        "group": "2e51c1e58b2f2a26",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "motor 2 enable led ind",
        "x": 980,
        "y": 160,
        "wires": []
    },
    {
        "id": "c458448f43e13657",
        "type": "ui_led",
        "z": "693713ade92e377d",
        "order": 4,
        "group": "2e51c1e58b2f2a26",
        "width": 0,
        "height": 0,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "colorForValue": [
            {
                "color": "#00ff00",
                "value": "true",
                "valueType": "bool"
            },
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": false,
        "name": "motor 3 enable led ind",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "e7bb0b36f551c054",
        "type": "ui_dropdown",
        "z": "693713ade92e377d",
        "name": "Motor get selector de modo",
        "label": "Seleccionar modo",
        "tooltip": "",
        "place": "Elegir",
        "group": "d94e13d63798c8df",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Modo 0",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Modo 1",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Modo 2",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "36a883395b745fe7"
            ]
        ]
    },
    {
        "id": "36a883395b745fe7",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "Motor get guardar modo",
        "func": "global.set(\"motor_get_modo_seleccionado\", msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": []
    },
    {
        "id": "def6bac79eebbe08",
        "type": "ui_button",
        "z": "693713ade92e377d",
        "name": "Motor get botón enviar",
        "group": "b1a5f87ddd67268a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "GET STATE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 300,
        "y": 660,
        "wires": [
            [
                "8aa14c5606cfae71"
            ]
        ]
    },
    {
        "id": "8aa14c5606cfae71",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "motor get crear mensaje JSON",
        "func": "let mode = global.get(\"motor_get_modo_seleccionado\");\nif (mode === undefined) {\n    node.warn(\"Modo no seleccionado\");\n    return null;\n}\n\nlet mensaje = {\n    task: \"motor_get\",\n    motor: [0, 1, 2, 3],\n    mode: mode\n};\n\nmsg.payload = JSON.stringify(mensaje);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "9736626addb97677"
            ]
        ]
    },
    {
        "id": "9736626addb97677",
        "type": "mqtt out",
        "z": "693713ade92e377d",
        "name": "",
        "topic": "BBRemote/cmds/motor/motor_get",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1000,
        "y": 660,
        "wires": []
    },
    {
        "id": "b38054b7ba59a58f",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 4",
        "func": "let dir = msg.payload.dir;\n\nif (!Array.isArray(dir) || dir.length !== 4) {\n    node.warn(\"Esperado array de 4 posiciones\");\n    return null;\n}\n\nreturn [\n    { payload: dir[0] === 0 ? \"Sentido horario\" : \"Sentido antihorario\", topic: \"dir0\" },\n    { payload: dir[1] === 0 ? \"Sentido horario\" : \"Sentido antihorario\", topic: \"dir1\" },\n    { payload: dir[2] === 0 ? \"Sentido horario\" : \"Sentido antihorario\", topic: \"dir2\" },\n    { payload: dir[3] === 0 ? \"Sentido horario\" : \"Sentido antihorario\", topic: \"dir3\" }\n];\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "cd154a9c170d58a9"
            ],
            [
                "573f5d0dc0fac020"
            ],
            [
                "32fcc691a27118c7"
            ],
            [
                "d7b0a927d96239fd"
            ]
        ]
    },
    {
        "id": "cd154a9c170d58a9",
        "type": "ui_text",
        "z": "693713ade92e377d",
        "group": "e51c47abdab9d722",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Motor 0 dir ind",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 240,
        "wires": []
    },
    {
        "id": "573f5d0dc0fac020",
        "type": "ui_text",
        "z": "693713ade92e377d",
        "group": "e51c47abdab9d722",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Motor 1 dir ind",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 280,
        "wires": []
    },
    {
        "id": "32fcc691a27118c7",
        "type": "ui_text",
        "z": "693713ade92e377d",
        "group": "e51c47abdab9d722",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Motor 2 dir ind",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 320,
        "wires": []
    },
    {
        "id": "d7b0a927d96239fd",
        "type": "ui_text",
        "z": "693713ade92e377d",
        "group": "e51c47abdab9d722",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Motor 3 dir ind",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "8c15229b2dfc3df4",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 5",
        "func": "let step = msg.payload.step_time;\n\nif (!Array.isArray(step) || step.length !== 4) {\n    node.warn(\"Esperado array de 4 posiciones en 'step_time'\");\n    return [null, null, null, null];\n}\n\n// Cada mensaje va a una salida distinta\nreturn [\n    { payload: step[0] },\n    { payload: step[1] },\n    { payload: step[2] },\n    { payload: step[3] }\n];\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 420,
        "wires": [
            [
                "c934bc4df1239d78"
            ],
            [
                "9c12651e0bfd6681"
            ],
            [
                "de334fc7179e1775"
            ],
            [
                "02763aaae862204c"
            ]
        ]
    },
    {
        "id": "c934bc4df1239d78",
        "type": "ui_gauge",
        "z": "693713ade92e377d",
        "name": "Motor 0 step_time ind",
        "group": "a0bb5838a582ce10",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "M 0",
        "label": "units",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 400,
        "wires": []
    },
    {
        "id": "9c12651e0bfd6681",
        "type": "ui_gauge",
        "z": "693713ade92e377d",
        "name": "Motor 1 step_time ind",
        "group": "907edce3d642b8ac",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "M 1",
        "label": "units",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 440,
        "wires": []
    },
    {
        "id": "de334fc7179e1775",
        "type": "ui_gauge",
        "z": "693713ade92e377d",
        "name": "Motor 2 step_time ind",
        "group": "0be7dc5733d3c5a2",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "M 2",
        "label": "units",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 480,
        "wires": []
    },
    {
        "id": "02763aaae862204c",
        "type": "ui_gauge",
        "z": "693713ade92e377d",
        "name": "Motor 3 step_time ind",
        "group": "c534c2cc743d8d74",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "M 3",
        "label": "units",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 520,
        "wires": []
    },
    {
        "id": "ceb3f4e71fdc32f0",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "Motor set guardar modo",
        "func": "global.set(\"motor_modo_seleccionado\", msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 780,
        "wires": []
    },
    {
        "id": "2c8e21be8a3e695c",
        "type": "ui_button",
        "z": "693713ade92e377d",
        "name": "Motor set botón enviar",
        "group": "b1a5f87ddd67268a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SET STATE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 300,
        "y": 820,
        "wires": [
            [
                "6a0eb95b3aeed44f"
            ]
        ]
    },
    {
        "id": "6a0eb95b3aeed44f",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "Crear mensaje JSON",
        "func": "let mode = global.get(\"motor_modo_seleccionado\");\n\nif (mode === undefined) {\n    node.warn(\"Modo no seleccionado\");\n    return null;\n}\n\n// Obtenemos los datos de los otros campos (por ejemplo desde flow)\nlet ena = [\n    flow.get(\"ena_0\") || 0,\n    flow.get(\"ena_1\") || 0,\n    flow.get(\"ena_2\") || 0,\n    flow.get(\"ena_3\") || 0\n];\n\nlet dir = [\n    flow.get(\"dir_0\") || 0,\n    flow.get(\"dir_1\") || 0,\n    flow.get(\"dir_2\") || 0,\n    flow.get(\"dir_3\") || 0\n];\n\nlet step_time = [\n    flow.get(\"step_0\") || 1000,\n    flow.get(\"step_1\") || 1000,\n    flow.get(\"step_2\") || 1000,\n    flow.get(\"step_3\") || 1000\n];\n\nlet mensaje = {\n    task: \"motor_set\",\n    motor: [0, 1, 2, 3],\n    ena: ena,\n    dir: dir,\n    step_time: step_time,\n    mode: mode\n};\n\nmsg.payload = mensaje;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 820,
        "wires": [
            [
                "bdbdf9fa291bcaa9"
            ]
        ]
    },
    {
        "id": "bdbdf9fa291bcaa9",
        "type": "mqtt out",
        "z": "693713ade92e377d",
        "name": "",
        "topic": "BBRemote/cmds/motor/motor_set",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1000,
        "y": 820,
        "wires": []
    },
    {
        "id": "87e9ba570c579e60",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 6",
        "func": "flow.set(\"ena_0\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "c6549f6b29baea6b",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 7",
        "func": "flow.set(\"ena_1\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "cbd0f5a7838a3c20",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 8",
        "func": "flow.set(\"ena_2\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "87434c71519c59d4",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 9",
        "func": "flow.set(\"ena_3\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "ee1060829cfb30a1",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "ena 3 control",
        "label": "M 3",
        "tooltip": "",
        "group": "8fb18ca85539c5d3",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1140,
        "wires": [
            [
                "87434c71519c59d4"
            ]
        ]
    },
    {
        "id": "6da79692e402a0c4",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "ena 2 control",
        "label": "M 2",
        "tooltip": "",
        "group": "8fb18ca85539c5d3",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1100,
        "wires": [
            [
                "cbd0f5a7838a3c20"
            ]
        ]
    },
    {
        "id": "646cb88553d84d10",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "ena 0 control",
        "label": "M 0",
        "tooltip": "",
        "group": "8fb18ca85539c5d3",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1020,
        "wires": [
            [
                "87e9ba570c579e60"
            ]
        ]
    },
    {
        "id": "51539d9c489d91e9",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "ena 1 control",
        "label": "M 1",
        "tooltip": "",
        "group": "8fb18ca85539c5d3",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "c6549f6b29baea6b"
            ]
        ]
    },
    {
        "id": "f6d7c0b86dee0476",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 10",
        "func": "flow.set(\"dir_0\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "3fb572b9751ecfa8",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 11",
        "func": "flow.set(\"dir_1\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "439eaee3d513e069",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 12",
        "func": "flow.set(\"dir_2\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "f64f4ab785342d93",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 13",
        "func": "flow.set(\"dir_3\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "1da1138998088fa6",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "dir 3 control",
        "label": "M 3",
        "tooltip": "",
        "group": "8c1aaa423b174586",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1300,
        "wires": [
            [
                "f64f4ab785342d93"
            ]
        ]
    },
    {
        "id": "f949a0bae10fa710",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "dir 2 control",
        "label": "M 2",
        "tooltip": "",
        "group": "8c1aaa423b174586",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1260,
        "wires": [
            [
                "439eaee3d513e069"
            ]
        ]
    },
    {
        "id": "93c67b59eef75f34",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "dir 0 control",
        "label": "M 0",
        "tooltip": "",
        "group": "8c1aaa423b174586",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1180,
        "wires": [
            [
                "f6d7c0b86dee0476"
            ]
        ]
    },
    {
        "id": "f6950b63789e2841",
        "type": "ui_switch",
        "z": "693713ade92e377d",
        "name": "dir 1 control",
        "label": "M 1",
        "tooltip": "",
        "group": "8c1aaa423b174586",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 270,
        "y": 1220,
        "wires": [
            [
                "3fb572b9751ecfa8"
            ]
        ]
    },
    {
        "id": "158657d86b0b5068",
        "type": "ui_numeric",
        "z": "693713ade92e377d",
        "name": "step_time 0 control",
        "label": "M 0",
        "tooltip": "",
        "group": "9bb9dc7f18611a59",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 1340,
        "wires": [
            [
                "7ed83f7425f4463c"
            ]
        ]
    },
    {
        "id": "7ed83f7425f4463c",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 14",
        "func": "flow.set(\"step_0\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "db3b07a10b35c075",
        "type": "ui_numeric",
        "z": "693713ade92e377d",
        "name": "step_time 1 control",
        "label": "M 1",
        "tooltip": "",
        "group": "9bb9dc7f18611a59",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 1380,
        "wires": [
            [
                "a8a114613b41a45b"
            ]
        ]
    },
    {
        "id": "a8a114613b41a45b",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 15",
        "func": "flow.set(\"step_1\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b8f8c90d3ae90c",
        "type": "ui_numeric",
        "z": "693713ade92e377d",
        "name": "step_time 2 control",
        "label": "M 2",
        "tooltip": "",
        "group": "9bb9dc7f18611a59",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 1420,
        "wires": [
            [
                "adac158739591c53"
            ]
        ]
    },
    {
        "id": "adac158739591c53",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 16",
        "func": "flow.set(\"step_2\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "0ef5d52a3b63c9ca",
        "type": "ui_numeric",
        "z": "693713ade92e377d",
        "name": "step_time 3 control",
        "label": "M 3",
        "tooltip": "",
        "group": "9bb9dc7f18611a59",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "10",
        "max": "1000000",
        "step": 1,
        "className": "",
        "x": 290,
        "y": 1460,
        "wires": [
            [
                "cbb19d603dcf0966"
            ]
        ]
    },
    {
        "id": "cbb19d603dcf0966",
        "type": "function",
        "z": "693713ade92e377d",
        "name": "function 17",
        "func": "flow.set(\"step_3\", msg.payload); // Cambiá el número según el switch\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "057f21aab817b218",
        "type": "ui_dropdown",
        "z": "693713ade92e377d",
        "name": "Motor set selector de modo",
        "label": "Seleccionar modo",
        "tooltip": "",
        "place": "Elegir",
        "group": "d94e13d63798c8df",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Modo 0",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 320,
        "y": 780,
        "wires": [
            [
                "ceb3f4e71fdc32f0"
            ]
        ]
    },
    {
        "id": "c8fde93dfee5cc5c",
        "type": "inject",
        "z": "693713ade92e377d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 700,
        "wires": [
            [
                "8aa14c5606cfae71"
            ]
        ]
    },
    {
        "id": "f8b9c4a03775a3ea",
        "type": "inject",
        "z": "693713ade92e377d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 880,
        "wires": [
            [
                "6a0eb95b3aeed44f"
            ]
        ]
    },
    {
        "id": "ef64e6220276dba9",
        "type": "inject",
        "z": "693713ade92e377d",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 80,
        "y": 620,
        "wires": [
            [
                "e7bb0b36f551c054"
            ]
        ]
    },
    {
        "id": "4954a1797a27c347",
        "type": "inject",
        "z": "693713ade92e377d",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 80,
        "y": 780,
        "wires": [
            [
                "057f21aab817b218"
            ]
        ]
    },
    {
        "id": "55ba06c4604f09a8",
        "type": "inject",
        "z": "693713ade92e377d",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 65,
        "y": 1018.3333129882812,
        "wires": [
            [
                "646cb88553d84d10",
                "51539d9c489d91e9",
                "6da79692e402a0c4",
                "ee1060829cfb30a1"
            ]
        ]
    },
    {
        "id": "8055ebcc28a238dd",
        "type": "inject",
        "z": "693713ade92e377d",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 60,
        "y": 1180,
        "wires": [
            [
                "93c67b59eef75f34",
                "f6950b63789e2841",
                "f949a0bae10fa710",
                "1da1138998088fa6"
            ]
        ]
    },
    {
        "id": "660c13f3057736e5",
        "type": "inject",
        "z": "693713ade92e377d",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "200000",
        "payloadType": "num",
        "x": 60,
        "y": 1340,
        "wires": [
            [
                "158657d86b0b5068",
                "db3b07a10b35c075",
                "b8b8f8c90d3ae90c",
                "0ef5d52a3b63c9ca"
            ]
        ]
    },
    {
        "id": "inject_simular",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "Simular datos ADC",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "9ac27f650dcc4647"
            ]
        ]
    },
    {
        "id": "9ac27f650dcc4647",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "Generar datos senoidales",
        "func": "let t = context.get('t') || 0;\nconst samples = 10;\n\nlet ch0 = [], ch1 = [], ch2 = [], ch3 = [];\nfor (let i = 0; i < samples; i++) {\n    // Generación de los valores crudos de los canales en el rango de 0 a 4096\n    ch0.push(Math.sin(0.1 * (t + i)) * 2048 + 2048);  // Aseguramos que esté en el rango de 0 a 4096\n    ch1.push(Math.sin(0.1 * (t + i) + 1) * 2048 + 2048);\n    ch2.push(Math.sin(0.1 * (t + i) + 2) * 2048 + 2048);\n    ch3.push(Math.sin(0.1 * (t + i) + 3) * 2048 + 2048);\n}\n\n// Guardamos el tiempo para la próxima ejecución\ncontext.set('t', t + samples);\n\n// Creamos el mensaje con los valores crudos\nmsg.payload = {\n    channels: {\n        ch0: ch0,\n        ch1: ch1,\n        ch2: ch2,\n        ch3: ch3\n    }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "template_chart",
        "type": "ui_template",
        "z": "62edeeffab35bf12",
        "group": "group_adc",
        "name": "",
        "order": 1,
        "width": 16,
        "height": 8,
        "format": "<canvas id=\"myChart\" width=\"800\" height=\"400\"></canvas>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n    (function(scope) {\n    let sampleIndex = 0;\n    let maxPoints = 500;\n    let ts = 1;\n    let showLine_set = false;\n    let selectedChannel = \"all\";\n    let savedData = [];\n\n    const ctx = document.getElementById('myChart').getContext('2d');\n    const chart = new Chart(ctx, {\n        type: 'scatter',\n        data: {\n            datasets: [\n                { label: 'ch0', data: [], backgroundColor: 'red', showLine: false, pointRadius: 2 },\n                { label: 'ch1', data: [], backgroundColor: 'blue', showLine: false, pointRadius: 2 },\n                { label: 'ch2', data: [], backgroundColor: 'green', showLine: false, pointRadius: 2 },\n                { label: 'ch3', data: [], backgroundColor: 'orange', showLine: false, pointRadius: 2 }\n            ]\n        },\n        options: {\n            animation: false,\n            scales: {\n                x: {\n                    type: 'linear',\n                    title: {\n                        display: true,\n                        text: '[ms]',\n                        font: { size: 26 }\n                    },\n                    ticks: {\n                        font: { size: 24 }\n                    }\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: '[V]',\n                        font: { size: 26 }\n                    },\n                    ticks: {\n                        font: { size: 24 }\n                    }\n                }\n            }\n        }\n    });\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        if (msg.topic === \"maxPoints\") {\n            maxPoints = msg.payload;\n            return;\n        }\n\n        if (msg.topic === \"ts\") {\n        ts = msg.payload;\n        return;\n        }\n\n        if (msg.topic === \"channel\") {\n            selectedChannel = msg.payload;\n            chart.data.datasets.forEach((ds, i) => {\n                ds.hidden = selectedChannel !== \"all\" && ds.label !== selectedChannel;\n            });\n            chart.update();\n            return;\n        }\n\n        if (msg.topic === \"clear\") {\n            chart.data.datasets.forEach(ds => ds.data = []);\n            sampleIndex = 0;\n            savedData = [];\n            chart.update();\n            return;\n        }\n\n        if (msg.topic === \"download_csv\") {\n            let csvContent = \"sample,ch0,ch1,ch2,ch3\\n\";\n            savedData.forEach(row => {\n                csvContent += `${row.sample},${row.ch0},${row.ch1},${row.ch2},${row.ch3}\\n`;\n            });\n\n            const blob = new Blob([csvContent], { type: \"text/csv\" });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"datos_adc.csv\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            return;\n        }\n        \n        if (msg.topic === \"showLine\") {\n        showLine_set = msg.payload;\n        chart.data.datasets.forEach((ds) => {\n        ds.showLine = showLine_set;\n        });\n        chart.update();\n        return;\n        }\n\n        if (!msg.payload || !msg.payload.channels) return;\n\n        const ch = msg.payload.channels;\n        const length = ch.ch0.length;\n\n        for (let i = 0; i < length; i++) {\n            if (selectedChannel === \"all\" || selectedChannel === \"ch0\")\n                chart.data.datasets[0].data.push({x: sampleIndex * ts, y: ch.ch0[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch1\")\n                chart.data.datasets[1].data.push({x: sampleIndex * ts, y: ch.ch1[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch2\")\n                chart.data.datasets[2].data.push({x: sampleIndex * ts, y: ch.ch2[i]});\n            if (selectedChannel === \"all\" || selectedChannel === \"ch3\")\n                chart.data.datasets[3].data.push({x: sampleIndex * ts, y: ch.ch3[i]});\n\n            savedData.push({\n                sample: sampleIndex,\n                ch0: ch.ch0[i],\n                ch1: ch.ch1[i],\n                ch2: ch.ch2[i],\n                ch3: ch.ch3[i]\n            });\n\n            sampleIndex++;\n        }\n\n        chart.data.datasets.forEach(ds => {\n            if (ds.data.length > maxPoints) {\n                ds.data.splice(0, ds.data.length - maxPoints);\n            }\n        });\n\n        chart.update();\n    });\n})(scope);\n</script>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 940,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "set_maxpoints",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "Set maxPoints",
        "func": "msg.topic = \"maxPoints\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 620,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "clear_button",
        "type": "ui_button",
        "z": "62edeeffab35bf12",
        "name": "clr_plot",
        "group": "60362c2b6b575234",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Clear plot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "clear",
        "topicType": "str",
        "x": 440,
        "y": 500,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "5112b95d2c4c61e0",
        "type": "ui_numeric",
        "z": "62edeeffab35bf12",
        "name": "sample_rate",
        "label": "Sample rate [Hz]",
        "tooltip": "",
        "group": "89993fb634fc3df1",
        "order": 1,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "sample_rate",
        "topicType": "str",
        "format": "{{value}}",
        "min": "1",
        "max": "40000",
        "step": "1",
        "className": "",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "857a1af401b1cd0e"
            ]
        ]
    },
    {
        "id": "3bb0485750c75295",
        "type": "ui_numeric",
        "z": "62edeeffab35bf12",
        "name": "num_samples",
        "label": "Samples",
        "tooltip": "",
        "group": "89993fb634fc3df1",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "num_samples",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "8",
        "max": "5120",
        "step": "2",
        "className": "",
        "x": 460,
        "y": 140,
        "wires": [
            [
                "3342fb3a7d63cb72"
            ]
        ]
    },
    {
        "id": "cbf3e9e69810a231",
        "type": "ui_numeric",
        "z": "62edeeffab35bf12",
        "name": "buffer_size",
        "label": "Buffer size",
        "tooltip": "",
        "group": "89993fb634fc3df1",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "buffer_size",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "8",
        "max": "1024",
        "step": "2",
        "className": "",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "a74966a3aa0e23f6"
            ]
        ]
    },
    {
        "id": "448e91d58cc1be69",
        "type": "ui_dropdown",
        "z": "62edeeffab35bf12",
        "name": "mode",
        "label": "Mode",
        "tooltip": "",
        "place": "Select option",
        "group": "89993fb634fc3df1",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "mode 0",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "mode",
        "topicType": "msg",
        "className": "",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "f4d475c152ace3bf"
            ]
        ]
    },
    {
        "id": "0fc141f5c4549211",
        "type": "ui_switch",
        "z": "62edeeffab35bf12",
        "name": "external_trigger",
        "label": "External trigger",
        "tooltip": "",
        "group": "89993fb634fc3df1",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "external_trigger",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "c03f3c502b1488ff"
            ]
        ]
    },
    {
        "id": "359998dd231480f8",
        "type": "ui_button",
        "z": "62edeeffab35bf12",
        "name": "Start_adc_read",
        "group": "89993fb634fc3df1",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start adc",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 940,
        "y": 200,
        "wires": [
            [
                "f02e187d8c5d432f"
            ]
        ]
    },
    {
        "id": "857a1af401b1cd0e",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "sample_rate",
        "func": "flow.set(\"sample_rate\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3342fb3a7d63cb72",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "num_samples",
        "func": "flow.set(\"num_samples\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a74966a3aa0e23f6",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "buffer size",
        "func": "flow.set(\"buffer_size\", msg.payload);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f4d475c152ace3bf",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "mode",
        "func": "flow.set(\"mode\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f02e187d8c5d432f",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "get adc data",
        "func": "let config = {\n    task: \"adc\",\n    sample_rate: flow.get(\"sample_rate\") || 10,\n    num_samples: flow.get(\"num_samples\") || 32,\n    buffer_size: flow.get(\"buffer_size\") || 16,\n    mode: flow.get(\"mode\") || 0,\n    enable_external_trigger: flow.get(\"enable_external_trigger\") ? 1 : 0\n};\n\nmsg.payload = config;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 200,
        "wires": [
            [
                "d819f4e25815e1b6"
            ]
        ]
    },
    {
        "id": "c03f3c502b1488ff",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "trigger",
        "func": "flow.set(\"enable_external_trigger\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d819f4e25815e1b6",
        "type": "mqtt out",
        "z": "62edeeffab35bf12",
        "name": "",
        "topic": "BBRemote/cmds/adc",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ee27f07affeb044c",
        "x": 1380,
        "y": 200,
        "wires": []
    },
    {
        "id": "c3b71c440781325c",
        "type": "mqtt in",
        "z": "62edeeffab35bf12",
        "name": "",
        "topic": "BBRemote/rsp/adc",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ee27f07affeb044c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 470,
        "y": 380,
        "wires": [
            [
                "e1479adbee8d0f56",
                "6272d0ee232286f5"
            ]
        ]
    },
    {
        "id": "fda98b996ab09eec",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 930,
        "y": 260,
        "wires": [
            [
                "f02e187d8c5d432f"
            ]
        ]
    },
    {
        "id": "cf5881ea7a94b2e1",
        "type": "ui_button",
        "z": "62edeeffab35bf12",
        "name": "download_csv",
        "group": "60362c2b6b575234",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Download_csv",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "download_csv",
        "topicType": "str",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "5de44fd21cdb41f4",
        "type": "ui_switch",
        "z": "62edeeffab35bf12",
        "name": "showLine",
        "label": "Show line ch",
        "tooltip": "",
        "group": "60362c2b6b575234",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "showLine",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 440,
        "y": 540,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "6272d0ee232286f5",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "resolution volt",
        "func": "if (msg.payload && msg.payload.channels) {\n    const resolution = msg.payload.resolution || 4096; // Default a 4096 si no viene\n    const vref = msg.payload.vref || 1.8;              // Default a 1.8V si no viene\n\n    const rawChannels = JSON.parse(JSON.stringify(msg.payload.channels)); // Copia profunda\n    const channels = {};\n\n    // Calcula el valor medio (punto cero) dinámicamente en base a la resolución\n    const midValue = resolution / 2;  // El punto medio de la resolución, por ejemplo: 2048 para 4096\n\n    for (let ch in rawChannels) {\n        if (Array.isArray(rawChannels[ch])) {\n            // Restar el valor medio (centrar alrededor de 0) antes de escalar\n            channels[ch] = rawChannels[ch].map(value => {\n                const centeredValue = value - midValue;  // Centrar alrededor de 0\n                return (centeredValue / resolution) * vref;  // Luego aplicar la conversión a voltios\n            });\n        }\n    }\n\n    msg.payload.raw_channels = rawChannels; // Guarda los datos crudos\n    msg.payload.channels = channels;        // Guarda los datos escalados\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "numeric_muestras",
        "type": "ui_numeric",
        "z": "62edeeffab35bf12",
        "name": "buffer_chart",
        "label": "Buffer chart",
        "tooltip": "",
        "group": "60362c2b6b575234",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "buffer_chart",
        "topicType": "str",
        "format": "{{value}}",
        "min": "8",
        "max": "5120",
        "step": "8",
        "className": "",
        "x": 450,
        "y": 620,
        "wires": [
            [
                "set_maxpoints"
            ]
        ]
    },
    {
        "id": "e1479adbee8d0f56",
        "type": "function",
        "z": "62edeeffab35bf12",
        "name": "ts",
        "func": "// Asegúrate de que sample_rate se define correctamente, con valor por defecto 1 si no viene\nconst sample_rate = msg.payload.sample_rate || 1;  // Si no hay sample_rate, usamos 1 por defecto\n\n// Calculamos el factor\nlet ts = (1 / sample_rate)*1000;  // Ts a ms \n\n// Asignamos el mensaje final\nmsg.topic = \"ts\";\nmsg.payload = ts;  // Le asignamos el valor de factor al payload\n\n// Retornamos el mensaje\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "template_chart"
            ]
        ]
    },
    {
        "id": "c45991a7d1f014ab",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "5112b95d2c4c61e0"
            ]
        ]
    },
    {
        "id": "83ba25f023885b93",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "32",
        "payloadType": "num",
        "x": 280,
        "y": 140,
        "wires": [
            [
                "3bb0485750c75295"
            ]
        ]
    },
    {
        "id": "2ba6bb77b88043b4",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "32",
        "payloadType": "num",
        "x": 280,
        "y": 180,
        "wires": [
            [
                "cbf3e9e69810a231"
            ]
        ]
    },
    {
        "id": "83c0d571896298c5",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "448e91d58cc1be69"
            ]
        ]
    },
    {
        "id": "f8cea854421a52d8",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "0fc141f5c4549211"
            ]
        ]
    },
    {
        "id": "de3feb765f42ac3f",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "5de44fd21cdb41f4"
            ]
        ]
    },
    {
        "id": "6419fec87c96dff5",
        "type": "inject",
        "z": "62edeeffab35bf12",
        "name": "init config",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "num",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "numeric_muestras"
            ]
        ]
    }
]